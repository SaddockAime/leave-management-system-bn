openapi: 3.0.0
info:
  title: Leave Management System API
  description: Comprehensive API for managing employee leave, HR operations, recruitment, compensation, and onboarding
  version: 1.0.0
  contact:
    name: API Support
    email: support@company.com
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.company.com
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          minLength: 6
      example:
        email: user@company.com
        password: password123
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether login was successful
        message:
          type: string
          description: Response message
        token:
          type: string
          description: JWT authentication token
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: string
          description: Token expiration time
      example:
        success: true
        message: Login successful
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn: 24h
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        role:
          $ref: '#/components/schemas/Role'
        roleId:
          type: string
          format: uuid
          description: User's role ID
        employeeId:
          type: string
          format: uuid
          description: Associated employee ID (if exists)
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPENDED
          description: User account status
        authProvider:
          type: string
          enum:
            - LOCAL
            - GOOGLE
          description: Authentication provider
        googleId:
          type: string
          description: Google OAuth ID (if using Google)
        emailVerified:
          type: boolean
          description: Whether email is verified
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique role identifier
        name:
          type: string
          enum:
            - ADMIN
            - MANAGER
            - EMPLOYEE
            - HR_MANAGER
            - GUEST
          description: Role name
        description:
          type: string
          description: Role description
        createdAt:
          type: string
          format: date-time
          description: Role creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          minLength: 6
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
      example:
        email: user@company.com
        password: password123
        firstName: John
        lastName: Doe
    GoogleAuthRequest:
      type: object
      properties:
        code:
          type: string
          description: Authorization code from Google OAuth
        state:
          type: string
          description: State parameter for CSRF protection
      example:
        code: 4/0AfJohXn...
        state: random_state_string
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token for getting new access token
      example:
        refreshToken: refresh_token_here
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password
        newPassword:
          type: string
          description: New password
          minLength: 6
      example:
        currentPassword: oldpassword123
        newPassword: newpassword123
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User's email address
      example:
        email: user@company.com
    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset token
        newPassword:
          type: string
          description: New password
          minLength: 6
      example:
        token: reset_token_here
        newPassword: newpassword123
    UpdateUserRoleRequest:
      type: object
      required:
        - roleId
      properties:
        roleId:
          type: string
          format: uuid
          description: New role ID
      example:
        roleId: uuid-here
    UpdateUserStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPENDED
          description: New user status
      example:
        status: ACTIVE
    AuthError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
        error:
          type: string
          description: Error type
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
      example:
        success: false
        message: Invalid credentials
        error: AUTHENTICATION_FAILED
        timestamp: '2024-01-01T00:00:00Z'
    Employee:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique employee identifier
        employeeId:
          type: string
          description: Employee ID number
        firstName:
          type: string
          description: Employee's first name
        lastName:
          type: string
          description: Employee's last name
        email:
          type: string
          format: email
          description: Employee's email address
        phone:
          type: string
          description: Employee's phone number
        dateOfBirth:
          type: string
          format: date
          description: Employee's date of birth
        hireDate:
          type: string
          format: date
          description: Employee's hire date
        position:
          type: string
          description: Employee's job position
        departmentId:
          type: string
          format: uuid
          description: Department ID
        managerId:
          type: string
          format: uuid
          description: Manager's employee ID
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - TERMINATED
            - ON_LEAVE
          description: Employee status
        salary:
          type: number
          description: Employee's salary
        address:
          type: string
          description: Employee's address
        profilePicture:
          type: string
          description: URL to employee's profile picture
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            relationship:
              type: string
            phone:
              type: string
        user:
          $ref: '#/components/schemas/User'
          description: Associated user account
        department:
          $ref: '#/components/schemas/Department'
          description: Employee's department
        manager:
          $ref: '#/components/schemas/Employee'
          description: Employee's manager
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    EmployeeCreate:
      type: object
      required:
        - userId
        - position
        - departmentId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the existing user to create employee profile for
        position:
          type: string
          enum:
            - EMPLOYEE
            - MANAGER
            - HR_MANAGER
            - ADMIN
          description: Employee's position/role in the organization
        departmentId:
          type: string
          format: uuid
          description: ID of the department the employee belongs to
        managerId:
          type: string
          format: uuid
          description: ID of the employee's manager (optional)
        hireDate:
          type: string
          format: date
          description: Employee's hire date (defaults to current date if not provided)
    EmployeeUpdate:
      type: object
      properties:
        firstName:
          type: string
          description: Employee's first name
        lastName:
          type: string
          description: Employee's last name
        phone:
          type: string
          description: Employee's phone number
        dateOfBirth:
          type: string
          format: date
          description: Employee's date of birth
        position:
          type: string
          description: Employee's job position
        departmentId:
          type: string
          format: uuid
          description: Department ID
        managerId:
          type: string
          format: uuid
          description: Manager's employee ID
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - TERMINATED
            - ON_LEAVE
          description: Employee status
        salary:
          type: number
          description: Employee's salary
        address:
          type: string
          description: Employee's address
        profilePicture:
          type: string
          description: URL to employee's profile picture
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            relationship:
              type: string
            phone:
              type: string
    EmployeeSelfProfile:
      type: object
      required:
        - position
        - departmentId
        - hireDate
      properties:
        position:
          type: string
          description: Employee's job position
        departmentId:
          type: string
          format: uuid
          description: Department ID
        hireDate:
          type: string
          format: date
          description: Employee's hire date
        phone:
          type: string
          description: Employee's phone number
        address:
          type: string
          description: Employee's address
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            relationship:
              type: string
            phone:
              type: string
    EmployeeResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique employee identifier
        employeeId:
          type: string
          description: Employee ID number
        firstName:
          type: string
          description: Employee's first name
        lastName:
          type: string
          description: Employee's last name
        email:
          type: string
          format: email
          description: Employee's email address
        phone:
          type: string
          description: Employee's phone number
        dateOfBirth:
          type: string
          format: date
          description: Employee's date of birth
        hireDate:
          type: string
          format: date
          description: Employee's hire date
        position:
          type: string
          description: Employee's job position
        departmentId:
          type: string
          format: uuid
          description: Department ID
        managerId:
          type: string
          format: uuid
          description: Manager's employee ID
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - TERMINATED
            - ON_LEAVE
          description: Employee status
        salary:
          type: number
          description: Employee's salary
        address:
          type: string
          description: Employee's address
        profilePicture:
          type: string
          description: URL to employee's profile picture
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            relationship:
              type: string
            phone:
              type: string
        user:
          $ref: '#/components/schemas/User'
          description: Associated user account
        department:
          $ref: '#/components/schemas/Department'
          description: Employee's department
        manager:
          $ref: '#/components/schemas/Employee'
          description: Employee's manager
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    EmployeeSearch:
      type: object
      properties:
        query:
          type: string
          description: Search query for name, email, or position
        departmentId:
          type: string
          format: uuid
          description: Filter by department
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - TERMINATED
            - ON_LEAVE
          description: Filter by status
        managerId:
          type: string
          format: uuid
          description: Filter by manager
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Number of items per page
    EmployeeOverview:
      type: object
      properties:
        totalEmployees:
          type: integer
          description: Total number of employees
        activeEmployees:
          type: integer
          description: Number of active employees
        newHiresThisMonth:
          type: integer
          description: New hires in current month
        employeesOnLeave:
          type: integer
          description: Employees currently on leave
        departmentDistribution:
          type: array
          items:
            type: object
            properties:
              departmentName:
                type: string
              count:
                type: integer
        recentHires:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    Department:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique department identifier
        name:
          type: string
          description: Department name
        description:
          type: string
          description: Department description
        managerId:
          type: string
          format: uuid
          description: Department manager ID
        location:
          type: string
          description: Department location
        budget:
          type: number
          description: Department budget
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    DepartmentCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Department name
        description:
          type: string
          description: Department description
        managerId:
          type: string
          format: uuid
          description: Department manager ID
        location:
          type: string
          description: Department location
        budget:
          type: number
          description: Department budget
    DepartmentUpdate:
      type: object
      properties:
        name:
          type: string
          description: Department name
        description:
          type: string
          description: Department description
        managerId:
          type: string
          format: uuid
          description: Department manager ID
        location:
          type: string
          description: Department location
        budget:
          type: number
          description: Department budget
    LeaveRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique leave request identifier
        employeeId:
          type: string
          format: uuid
          description: Employee ID requesting leave
        leaveTypeId:
          type: string
          format: uuid
          description: Type of leave requested
        startDate:
          type: string
          format: date
          description: Leave start date
        endDate:
          type: string
          format: date
          description: Leave end date
        duration:
          type: number
          description: Leave duration in days
        reason:
          type: string
          description: Reason for leave
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          description: Leave request status
        managerId:
          type: string
          format: uuid
          description: Manager ID for approval
        approvedAt:
          type: string
          format: date-time
          description: Approval timestamp
        approvedBy:
          type: string
          format: uuid
          description: Manager who approved
        rejectionReason:
          type: string
          description: Reason for rejection if applicable
        attachments:
          type: array
          items:
            type: string
          description: URLs to attached documents
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LeaveRequestCreate:
      type: object
      required:
        - leaveTypeId
        - startDate
        - endDate
        - reason
      properties:
        leaveTypeId:
          type: string
          format: uuid
          description: Type of leave requested
        startDate:
          type: string
          format: date
          description: Leave start date
        endDate:
          type: string
          format: date
          description: Leave end date
        reason:
          type: string
          description: Reason for leave
        attachments:
          type: array
          items:
            type: string
          description: URLs to attached documents
    LeaveRequestUpdate:
      type: object
      properties:
        startDate:
          type: string
          format: date
          description: Leave start date
        endDate:
          type: string
          format: date
          description: Leave end date
        reason:
          type: string
          description: Reason for leave
        attachments:
          type: array
          items:
            type: string
          description: URLs to attached documents
    LeaveRequestApproval:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - APPROVED
            - REJECTED
          description: Approval decision
        rejectionReason:
          type: string
          description: Reason for rejection if applicable
        comments:
          type: string
          description: Additional comments
    LeaveType:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique leave type identifier
        name:
          type: string
          description: Leave type name
        description:
          type: string
          description: Leave type description
        defaultDays:
          type: integer
          description: Default number of days allocated
        isPaid:
          type: boolean
          description: Whether this leave type is paid
        color:
          type: string
          description: Color code for UI display
        isActive:
          type: boolean
          description: Whether this leave type is active
        requiresApproval:
          type: boolean
          description: Whether approval is required
        maxConsecutiveDays:
          type: integer
          description: Maximum consecutive days allowed
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LeaveTypeCreate:
      type: object
      required:
        - name
        - defaultDays
      properties:
        name:
          type: string
          description: Leave type name
        description:
          type: string
          description: Leave type description
        defaultDays:
          type: integer
          minimum: 1
          description: Default number of days allocated
        isPaid:
          type: boolean
          default: true
          description: Whether this leave type is paid
        color:
          type: string
          description: Color code for UI display
        requiresApproval:
          type: boolean
          default: true
          description: Whether approval is required
        maxConsecutiveDays:
          type: integer
          description: Maximum consecutive days allowed
    LeaveTypeUpdate:
      type: object
      properties:
        name:
          type: string
          description: Leave type name
        description:
          type: string
          description: Leave type description
        defaultDays:
          type: integer
          minimum: 1
          description: Default number of days allocated
        isPaid:
          type: boolean
          description: Whether this leave type is paid
        color:
          type: string
          description: Color code for UI display
        isActive:
          type: boolean
          description: Whether this leave type is active
        requiresApproval:
          type: boolean
          description: Whether approval is required
        maxConsecutiveDays:
          type: integer
          description: Maximum consecutive days allowed
    LeaveBalance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique leave balance identifier
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        leaveTypeId:
          type: string
          format: uuid
          description: Leave type ID
        allocatedDays:
          type: number
          description: Total days allocated
        usedDays:
          type: number
          description: Days used
        pendingDays:
          type: number
          description: Days pending approval
        remainingDays:
          type: number
          description: Days remaining
        carryOverDays:
          type: number
          description: Days carried over from previous year
        year:
          type: integer
          description: Year for this balance
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LeaveBalanceUpdate:
      type: object
      properties:
        allocatedDays:
          type: number
          minimum: 0
          description: Total days to allocate
        carryOverDays:
          type: number
          minimum: 0
          description: Days to carry over
    LeaveSearch:
      type: object
      properties:
        employeeId:
          type: string
          format: uuid
          description: Filter by employee
        leaveTypeId:
          type: string
          format: uuid
          description: Filter by leave type
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          description: Filter by status
        startDate:
          type: string
          format: date
          description: Filter by start date
        endDate:
          type: string
          format: date
          description: Filter by end date
        managerId:
          type: string
          format: uuid
          description: Filter by manager
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Number of items per page
    Holiday:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique holiday identifier
        name:
          type: string
          description: Holiday name
        date:
          type: string
          format: date
          description: Holiday date
        description:
          type: string
          description: Holiday description
        isRecurring:
          type: boolean
          description: Whether this holiday recurs annually
        country:
          type: string
          description: Country where holiday applies
        isActive:
          type: boolean
          description: Whether this holiday is active
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    HolidayCreate:
      type: object
      required:
        - name
        - date
      properties:
        name:
          type: string
          description: Holiday name
        date:
          type: string
          format: date
          description: Holiday date
        description:
          type: string
          description: Holiday description
        isRecurring:
          type: boolean
          default: true
          description: Whether this holiday recurs annually
        country:
          type: string
          description: Country where holiday applies
    HolidayUpdate:
      type: object
      properties:
        name:
          type: string
          description: Holiday name
        date:
          type: string
          format: date
          description: Holiday date
        description:
          type: string
          description: Holiday description
        isRecurring:
          type: boolean
          description: Whether this holiday recurs annually
        country:
          type: string
          description: Country where holiday applies
        isActive:
          type: boolean
          description: Whether this holiday is active
    LeaveBalanceAdjustment:
      type: object
      required:
        - employeeId
        - leaveTypeId
        - adjustment
        - reason
      properties:
        employeeId:
          type: string
          format: uuid
          description: Employee ID for balance adjustment
        leaveTypeId:
          type: string
          format: uuid
          description: Leave type ID for adjustment
        adjustment:
          type: integer
          description: Number of days to adjust (positive for addition, negative for subtraction)
        reason:
          type: string
          minLength: 10
          maxLength: 200
          description: Reason for the adjustment
    HRDashboardSummary:
      type: object
      properties:
        totalEmployees:
          type: integer
          description: Total number of employees
        activeEmployees:
          type: integer
          description: Number of active employees
        employeesOnLeave:
          type: integer
          description: Employees currently on leave
        newHiresThisMonth:
          type: integer
          description: New hires in current month
        pendingLeaveRequests:
          type: integer
          description: Pending leave requests
        departmentDistribution:
          type: array
          items:
            type: object
            properties:
              departmentName:
                type: string
              count:
                type: integer
              percentage:
                type: number
        leaveTypeDistribution:
          type: array
          items:
            type: object
            properties:
              leaveType:
                type: string
              usedDays:
                type: number
              allocatedDays:
                type: number
        recentActivities:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              description:
                type: string
              timestamp:
                type: string
                format: date-time
              employeeName:
                type: string
    EmployeeAnalytics:
      type: object
      properties:
        totalEmployees:
          type: integer
          description: Total number of employees
        genderDistribution:
          type: object
          properties:
            male:
              type: integer
            female:
              type: integer
            other:
              type: integer
        ageDistribution:
          type: array
          items:
            type: object
            properties:
              range:
                type: string
              count:
                type: integer
        tenureDistribution:
          type: array
          items:
            type: object
            properties:
              range:
                type: string
              count:
                type: integer
        departmentDistribution:
          type: array
          items:
            type: object
            properties:
              department:
                type: string
              count:
                type: integer
              percentage:
                type: number
        salaryDistribution:
          type: object
          properties:
            average:
              type: number
            median:
              type: number
            min:
              type: number
            max:
              type: number
        turnoverRate:
          type: number
          description: Annual turnover rate percentage
        newHiresTrend:
          type: array
          items:
            type: object
            properties:
              month:
                type: string
              count:
                type: integer
    HRReport:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Report identifier
        name:
          type: string
          description: Report name
        type:
          type: string
          enum:
            - EMPLOYEE_COUNT
            - LEAVE_ANALYSIS
            - TURNOVER_ANALYSIS
            - SALARY_ANALYSIS
            - DEPARTMENT_ANALYSIS
          description: Report type
        parameters:
          type: object
          description: Report parameters
        generatedAt:
          type: string
          format: date-time
          description: When report was generated
        generatedBy:
          type: string
          format: uuid
          description: User who generated the report
        downloadUrl:
          type: string
          description: URL to download the report
        status:
          type: string
          enum:
            - GENERATING
            - COMPLETED
            - FAILED
          description: Report generation status
    BulkEmployeeOperation:
      type: object
      properties:
        operation:
          type: string
          enum:
            - UPDATE_STATUS
            - UPDATE_DEPARTMENT
            - UPDATE_SALARY
            - SEND_NOTIFICATION
          description: Type of bulk operation
        employeeIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of employee IDs to operate on
        parameters:
          type: object
          description: Operation-specific parameters
        status:
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETED
            - FAILED
          description: Operation status
        progress:
          type: number
          minimum: 0
          maximum: 100
          description: Operation progress percentage
        results:
          type: array
          items:
            type: object
            properties:
              employeeId:
                type: string
                format: uuid
              status:
                type: string
                enum:
                  - SUCCESS
                  - FAILED
              message:
                type: string
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
    HRPolicy:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Policy identifier
        name:
          type: string
          description: Policy name
        description:
          type: string
          description: Policy description
        category:
          type: string
          enum:
            - LEAVE
            - COMPENSATION
            - CONDUCT
            - SAFETY
            - OTHER
          description: Policy category
        content:
          type: string
          description: Policy content
        version:
          type: string
          description: Policy version
        effectiveDate:
          type: string
          format: date
          description: When policy becomes effective
        isActive:
          type: boolean
          description: Whether policy is currently active
        requiresAcknowledgment:
          type: boolean
          description: Whether employees must acknowledge
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    HRPolicyCreate:
      type: object
      required:
        - name
        - description
        - category
        - content
        - effectiveDate
      properties:
        name:
          type: string
          description: Policy name
        description:
          type: string
          description: Policy description
        category:
          type: string
          enum:
            - LEAVE
            - COMPENSATION
            - CONDUCT
            - SAFETY
            - OTHER
          description: Policy category
        content:
          type: string
          description: Policy content
        version:
          type: string
          description: Policy version
        effectiveDate:
          type: string
          format: date
          description: When policy becomes effective
        requiresAcknowledgment:
          type: boolean
          default: false
          description: Whether employees must acknowledge
    ComplianceReport:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Report identifier
        type:
          type: string
          enum:
            - LABOR_LAW
            - SAFETY
            - EQUAL_OPPORTUNITY
            - WAGE_HOUR
            - OTHER
          description: Compliance report type
        period:
          type: string
          description: Reporting period
        status:
          type: string
          enum:
            - COMPLIANT
            - NON_COMPLIANT
            - NEEDS_ATTENTION
          description: Compliance status
        findings:
          type: array
          items:
            type: object
            properties:
              issue:
                type: string
              severity:
                type: string
                enum:
                  - LOW
                  - MEDIUM
                  - HIGH
                  - CRITICAL
              recommendation:
                type: string
        generatedAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date
          description: When report is due
    WorkforcePlanning:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Planning identifier
        title:
          type: string
          description: Planning title
        description:
          type: string
          description: Planning description
        period:
          type: string
          description: Planning period
        type:
          type: string
          enum:
            - HIRING
            - RESTRUCTURING
            - SUCCESSION
            - SKILLS_DEVELOPMENT
          description: Planning type
        status:
          type: string
          enum:
            - DRAFT
            - IN_REVIEW
            - APPROVED
            - IMPLEMENTED
          description: Planning status
        goals:
          type: array
          items:
            type: string
          description: Planning goals
        actions:
          type: array
          items:
            type: object
            properties:
              action:
                type: string
              timeline:
                type: string
              responsible:
                type: string
                format: uuid
              status:
                type: string
                enum:
                  - PENDING
                  - IN_PROGRESS
                  - COMPLETED
        budget:
          type: number
          description: Estimated budget
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    JobPosting:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the job posting
        title:
          type: string
          description: Job title
        description:
          type: string
          description: Detailed job description
        requirements:
          type: string
          description: Job requirements
        responsibilities:
          type: string
          description: Job responsibilities
        departmentId:
          type: string
          format: uuid
          description: Department ID
        status:
          type: string
          enum:
            - DRAFT
            - PUBLISHED
            - CLOSED
            - ARCHIVED
          description: Current status of the job posting
        employmentType:
          type: string
          enum:
            - FULL_TIME
            - PART_TIME
            - CONTRACT
            - INTERNSHIP
            - FREELANCE
          description: Type of employment
        minSalary:
          type: number
          description: Minimum salary
        maxSalary:
          type: number
          description: Maximum salary
        location:
          type: string
          description: Job location
        remoteWork:
          type: boolean
          description: Whether remote work is allowed
        experienceLevel:
          type: integer
          description: Required years of experience
        skills:
          type: array
          items:
            type: string
          description: Required skills
        benefits:
          type: array
          items:
            type: string
          description: Offered benefits
        applicationDeadline:
          type: string
          format: date
          description: Application deadline
        numberOfPositions:
          type: integer
          description: Number of open positions
        createdBy:
          type: string
          format: uuid
          description: User who created the posting
        approvedBy:
          type: string
          format: uuid
          description: User who approved the posting
        publishedAt:
          type: string
          format: date-time
          description: When posting was published
        closedAt:
          type: string
          format: date-time
          description: When posting was closed
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    JobPostingCreate:
      type: object
      required:
        - title
        - description
        - requirements
        - responsibilities
        - departmentId
        - employmentType
        - location
      properties:
        title:
          type: string
          description: Job title
        description:
          type: string
          description: Detailed job description
        requirements:
          type: string
          description: Job requirements
        responsibilities:
          type: string
          description: Job responsibilities
        departmentId:
          type: string
          format: uuid
          description: Department ID
        employmentType:
          type: string
          enum:
            - FULL_TIME
            - PART_TIME
            - CONTRACT
            - INTERNSHIP
            - FREELANCE
          description: Type of employment
        minSalary:
          type: number
          description: Minimum salary
        maxSalary:
          type: number
          description: Maximum salary
        location:
          type: string
          description: Job location
        remoteWork:
          type: boolean
          default: false
          description: Whether remote work is allowed
        experienceLevel:
          type: integer
          minimum: 0
          description: Required years of experience
        skills:
          type: array
          items:
            type: string
          description: Required skills
        benefits:
          type: array
          items:
            type: string
          description: Offered benefits
        applicationDeadline:
          type: string
          format: date
          description: Application deadline
        numberOfPositions:
          type: integer
          minimum: 1
          default: 1
          description: Number of open positions
    JobPostingUpdate:
      type: object
      properties:
        title:
          type: string
          description: Job title
        description:
          type: string
          description: Detailed job description
        requirements:
          type: string
          description: Job requirements
        responsibilities:
          type: string
          description: Job responsibilities
        employmentType:
          type: string
          enum:
            - FULL_TIME
            - PART_TIME
            - CONTRACT
            - INTERNSHIP
            - FREELANCE
          description: Type of employment
        minSalary:
          type: number
          description: Minimum salary
        maxSalary:
          type: number
          description: Maximum salary
        location:
          type: string
          description: Job location
        remoteWork:
          type: boolean
          description: Whether remote work is allowed
        experienceLevel:
          type: integer
          minimum: 0
          description: Required years of experience
        skills:
          type: array
          items:
            type: string
          description: Required skills
        benefits:
          type: array
          items:
            type: string
          description: Offered benefits
        applicationDeadline:
          type: string
          format: date
          description: Application deadline
        numberOfPositions:
          type: integer
          minimum: 1
          description: Number of open positions
    JobApplication:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the application
        jobPostingId:
          type: string
          format: uuid
          description: Associated job posting ID
        firstName:
          type: string
          description: Applicant's first name
        lastName:
          type: string
          description: Applicant's last name
        email:
          type: string
          format: email
          description: Applicant's email
        phone:
          type: string
          description: Applicant's phone number
        resumeUrl:
          type: string
          description: URL to resume
        coverLetterUrl:
          type: string
          description: URL to cover letter
        status:
          type: string
          enum:
            - APPLIED
            - UNDER_REVIEW
            - SHORTLISTED
            - INTERVIEW_SCHEDULED
            - INTERVIEWED
            - OFFER_EXTENDED
            - OFFER_ACCEPTED
            - OFFER_DECLINED
            - REJECTED
            - WITHDRAWN
          description: Current application status
        skills:
          type: array
          items:
            type: string
          description: Applicant's skills
        experienceYears:
          type: integer
          description: Years of experience
        expectedSalary:
          type: number
          description: Expected salary
        currentCompany:
          type: string
          description: Current company
        currentPosition:
          type: string
          description: Current position
        noticePeriod:
          type: integer
          description: Notice period in days
        source:
          type: string
          description: How applicant found the job
        notes:
          type: string
          description: Internal notes
        assignedTo:
          type: string
          format: uuid
          description: HR person assigned to review
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    JobApplicationCreate:
      type: object
      required:
        - jobPostingId
        - firstName
        - lastName
        - email
        - resumeUrl
      properties:
        jobPostingId:
          type: string
          format: uuid
          description: Associated job posting ID
        firstName:
          type: string
          description: Applicant's first name
        lastName:
          type: string
          description: Applicant's last name
        email:
          type: string
          format: email
          description: Applicant's email
        phone:
          type: string
          description: Applicant's phone number
        resumeUrl:
          type: string
          description: URL to resume
        coverLetterUrl:
          type: string
          description: URL to cover letter
        skills:
          type: array
          items:
            type: string
          description: Applicant's skills
        experienceYears:
          type: integer
          minimum: 0
          description: Years of experience
        expectedSalary:
          type: number
          minimum: 0
          description: Expected salary
        currentCompany:
          type: string
          description: Current company
        currentPosition:
          type: string
          description: Current position
        noticePeriod:
          type: integer
          minimum: 0
          description: Notice period in days
        source:
          type: string
          description: How applicant found the job
    JobApplicationUpdate:
      type: object
      properties:
        firstName:
          type: string
          description: Applicant's first name
        lastName:
          type: string
          description: Applicant's last name
        email:
          type: string
          format: email
          description: Applicant's email
        phone:
          type: string
          description: Applicant's phone number
        resumeUrl:
          type: string
          description: URL to resume
        coverLetterUrl:
          type: string
          description: URL to cover letter
        skills:
          type: array
          items:
            type: string
          description: Applicant's skills
        experienceYears:
          type: integer
          minimum: 0
          description: Years of experience
        expectedSalary:
          type: number
          minimum: 0
          description: Expected salary
        currentCompany:
          type: string
          description: Current company
        currentPosition:
          type: string
          description: Current position
        noticePeriod:
          type: integer
          minimum: 0
          description: Notice period in days
        source:
          type: string
          description: How applicant found the job
        notes:
          type: string
          description: Internal notes
    ApplicationStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - UNDER_REVIEW
            - SHORTLISTED
            - INTERVIEW_SCHEDULED
            - INTERVIEWED
            - OFFER_EXTENDED
            - OFFER_ACCEPTED
            - OFFER_DECLINED
            - REJECTED
            - WITHDRAWN
          description: New application status
        notes:
          type: string
          description: Notes about status change
        assignedTo:
          type: string
          format: uuid
          description: HR person assigned to review
    Interview:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the interview
        applicationId:
          type: string
          format: uuid
          description: Associated application ID
        type:
          type: string
          enum:
            - PHONE_SCREEN
            - TECHNICAL
            - BEHAVIORAL
            - FINAL
            - PANEL
          description: Interview type
        status:
          type: string
          enum:
            - SCHEDULED
            - IN_PROGRESS
            - COMPLETED
            - CANCELLED
            - RESCHEDULED
          description: Interview status
        scheduledAt:
          type: string
          format: date-time
          description: Scheduled interview time
        duration:
          type: integer
          description: Interview duration in minutes
        location:
          type: string
          description: Interview location
        meetingLink:
          type: string
          description: Virtual meeting link
        interviewers:
          type: array
          items:
            type: string
            format: uuid
          description: Array of interviewer IDs
        feedback:
          type: string
          description: Interview feedback
        result:
          type: string
          enum:
            - PASSED
            - FAILED
            - NEEDS_FOLLOW_UP
            - ON_HOLD
          description: Interview result
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Interview rating (1-5)
        notes:
          type: string
          description: Additional notes
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    InterviewCreate:
      type: object
      required:
        - applicationId
        - type
        - scheduledAt
        - duration
        - interviewers
      properties:
        applicationId:
          type: string
          format: uuid
          description: Associated application ID
        type:
          type: string
          enum:
            - PHONE_SCREEN
            - TECHNICAL
            - BEHAVIORAL
            - FINAL
            - PANEL
          description: Interview type
        scheduledAt:
          type: string
          format: date-time
          description: Scheduled interview time
        duration:
          type: integer
          minimum: 15
          description: Interview duration in minutes
        location:
          type: string
          description: Interview location
        meetingLink:
          type: string
          description: Virtual meeting link
        interviewers:
          type: array
          items:
            type: string
            format: uuid
          description: Array of interviewer IDs
        notes:
          type: string
          description: Additional notes
    InterviewUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - PHONE_SCREEN
            - TECHNICAL
            - BEHAVIORAL
            - FINAL
            - PANEL
          description: Interview type
        scheduledAt:
          type: string
          format: date-time
          description: Scheduled interview time
        duration:
          type: integer
          minimum: 15
          description: Interview duration in minutes
        location:
          type: string
          description: Interview location
        meetingLink:
          type: string
          description: Virtual meeting link
        interviewers:
          type: array
          items:
            type: string
            format: uuid
          description: Array of interviewer IDs
        notes:
          type: string
          description: Additional notes
    InterviewStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - IN_PROGRESS
            - COMPLETED
            - CANCELLED
            - RESCHEDULED
          description: New interview status
        feedback:
          type: string
          description: Interview feedback
        result:
          type: string
          enum:
            - PASSED
            - FAILED
            - NEEDS_FOLLOW_UP
            - ON_HOLD
          description: Interview result
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Interview rating (1-5)
        notes:
          type: string
          description: Additional notes
    RecruitmentAnalytics:
      type: object
      properties:
        totalJobPostings:
          type: integer
          description: Total number of job postings
        activeJobPostings:
          type: integer
          description: Number of active job postings
        totalApplications:
          type: integer
          description: Total number of applications
        applicationsThisMonth:
          type: integer
          description: Applications received this month
        averageTimeToHire:
          type: number
          description: Average time to hire in days
        applicationStatusDistribution:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
              count:
                type: integer
              percentage:
                type: number
        topSources:
          type: array
          items:
            type: object
            properties:
              source:
                type: string
              count:
                type: integer
              percentage:
                type: number
        departmentHiringNeeds:
          type: array
          items:
            type: object
            properties:
              department:
                type: string
              openPositions:
                type: integer
              applications:
                type: integer
        interviewMetrics:
          type: object
          properties:
            scheduled:
              type: integer
            completed:
              type: integer
            cancelled:
              type: integer
            averageRating:
              type: number
    Salary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the salary record
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        type:
          type: string
          enum:
            - BASE_SALARY
            - HOURLY_RATE
            - COMMISSION
            - BONUS
            - ALLOWANCE
          description: Salary type
        amount:
          type: number
          description: Salary amount
        payFrequency:
          type: string
          enum:
            - HOURLY
            - DAILY
            - WEEKLY
            - BI_WEEKLY
            - MONTHLY
            - ANNUALLY
          description: Pay frequency
        effectiveDate:
          type: string
          format: date
          description: Effective date
        endDate:
          type: string
          format: date
          description: End date (if applicable)
        reason:
          type: string
          description: Reason for salary change
        notes:
          type: string
          description: Additional notes
        approvedBy:
          type: string
          format: uuid
          description: User who approved the salary
        approvedAt:
          type: string
          format: date-time
          description: Approval timestamp
        percentageIncrease:
          type: number
          description: Percentage increase from previous salary
        previousAmount:
          type: number
          description: Previous salary amount
        isActive:
          type: boolean
          description: Whether this salary is currently active
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SalaryCreate:
      type: object
      required:
        - employeeId
        - type
        - amount
        - payFrequency
        - effectiveDate
      properties:
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        type:
          type: string
          enum:
            - BASE_SALARY
            - HOURLY_RATE
            - COMMISSION
            - BONUS
            - ALLOWANCE
          description: Salary type
        amount:
          type: number
          minimum: 0
          description: Salary amount
        payFrequency:
          type: string
          enum:
            - HOURLY
            - DAILY
            - WEEKLY
            - BI_WEEKLY
            - MONTHLY
            - ANNUALLY
          description: Pay frequency
        effectiveDate:
          type: string
          format: date
          description: Effective date
        endDate:
          type: string
          format: date
          description: End date (if applicable)
        reason:
          type: string
          description: Reason for salary change
        notes:
          type: string
          description: Additional notes
        percentageIncrease:
          type: number
          minimum: 0
          description: Percentage increase from previous salary
    SalaryUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - BASE_SALARY
            - HOURLY_RATE
            - COMMISSION
            - BONUS
            - ALLOWANCE
          description: Salary type
        amount:
          type: number
          minimum: 0
          description: Salary amount
        payFrequency:
          type: string
          enum:
            - HOURLY
            - DAILY
            - WEEKLY
            - BI_WEEKLY
            - MONTHLY
            - ANNUALLY
          description: Pay frequency
        effectiveDate:
          type: string
          format: date
          description: Effective date
        endDate:
          type: string
          format: date
          description: End date (if applicable)
        reason:
          type: string
          description: Reason for salary change
        notes:
          type: string
          description: Additional notes
        isActive:
          type: boolean
          description: Whether this salary is currently active
    Bonus:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the bonus
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        title:
          type: string
          description: Bonus title
        description:
          type: string
          description: Bonus description
        type:
          type: string
          enum:
            - PERFORMANCE
            - ANNUAL
            - QUARTERLY
            - PROJECT
            - REFERRAL
            - RETENTION
            - SIGN_ON
            - MILESTONE
            - OTHER
          description: Bonus type
        amount:
          type: number
          description: Bonus amount
        percentage:
          type: number
          description: Bonus percentage of base salary
        effectiveDate:
          type: string
          format: date
          description: Effective date
        paymentDate:
          type: string
          format: date
          description: Payment date
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - PAID
            - CANCELLED
            - REJECTED
          description: Bonus status
        criteria:
          type: string
          description: Criteria for earning the bonus
        notes:
          type: string
          description: Additional notes
        approvedBy:
          type: string
          format: uuid
          description: User who approved the bonus
        approvedAt:
          type: string
          format: date-time
          description: Approval timestamp
        rejectedBy:
          type: string
          format: uuid
          description: User who rejected the bonus
        rejectedAt:
          type: string
          format: date-time
          description: Rejection timestamp
        rejectionReason:
          type: string
          description: Reason for rejection
        paymentMethod:
          type: string
          description: Payment method
        referenceNumber:
          type: string
          description: Payment reference number
        isTaxable:
          type: boolean
          default: true
          description: Whether bonus is taxable
        attachments:
          type: array
          items:
            type: string
          description: URLs to attached documents
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BonusCreate:
      type: object
      required:
        - employeeId
        - title
        - type
        - amount
        - effectiveDate
      properties:
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        title:
          type: string
          description: Bonus title
        description:
          type: string
          description: Bonus description
        type:
          type: string
          enum:
            - PERFORMANCE
            - ANNUAL
            - QUARTERLY
            - PROJECT
            - REFERRAL
            - RETENTION
            - SIGN_ON
            - MILESTONE
            - OTHER
          description: Bonus type
        amount:
          type: number
          minimum: 0
          description: Bonus amount
        percentage:
          type: number
          minimum: 0
          maximum: 100
          description: Bonus percentage of base salary
        effectiveDate:
          type: string
          format: date
          description: Effective date
        paymentDate:
          type: string
          format: date
          description: Payment date
        criteria:
          type: string
          description: Criteria for earning the bonus
        notes:
          type: string
          description: Additional notes
        isTaxable:
          type: boolean
          default: true
          description: Whether bonus is taxable
    BonusUpdate:
      type: object
      properties:
        title:
          type: string
          description: Bonus title
        description:
          type: string
          description: Bonus description
        type:
          type: string
          enum:
            - PERFORMANCE
            - ANNUAL
            - QUARTERLY
            - PROJECT
            - REFERRAL
            - RETENTION
            - SIGN_ON
            - MILESTONE
            - OTHER
          description: Bonus type
        amount:
          type: number
          minimum: 0
          description: Bonus amount
        percentage:
          type: number
          minimum: 0
          maximum: 100
          description: Bonus percentage of base salary
        effectiveDate:
          type: string
          format: date
          description: Effective date
        paymentDate:
          type: string
          format: date
          description: Payment date
        criteria:
          type: string
          description: Criteria for earning the bonus
        notes:
          type: string
          description: Additional notes
        isTaxable:
          type: boolean
          description: Whether bonus is taxable
    BonusStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - APPROVED
            - PAID
            - CANCELLED
            - REJECTED
          description: New bonus status
        notes:
          type: string
          description: Additional notes
        rejectionReason:
          type: string
          description: Reason for rejection if applicable
        paymentMethod:
          type: string
          description: Payment method
        referenceNumber:
          type: string
          description: Payment reference number
    Benefit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the benefit
        name:
          type: string
          description: Benefit name
        description:
          type: string
          description: Benefit description
        type:
          type: string
          enum:
            - HEALTH_INSURANCE
            - DENTAL_INSURANCE
            - VISION_INSURANCE
            - LIFE_INSURANCE
            - DISABILITY_INSURANCE
            - RETIREMENT_PLAN
            - PAID_TIME_OFF
            - SICK_LEAVE
            - MATERNITY_LEAVE
            - PATERNITY_LEAVE
            - EDUCATION_REIMBURSEMENT
            - TRANSPORTATION
            - MEAL_ALLOWANCE
            - GYM_MEMBERSHIP
            - OTHER
          description: Benefit type
        category:
          type: string
          enum:
            - INSURANCE
            - RETIREMENT
            - TIME_OFF
            - WELLNESS
            - PROFESSIONAL_DEVELOPMENT
            - LIFESTYLE
          description: Benefit category
        cost:
          type: number
          description: Cost to company
        employeeContribution:
          type: number
          description: Employee contribution amount
        employeeContributionPercentage:
          type: number
          minimum: 0
          maximum: 100
          description: Employee contribution percentage
        isActive:
          type: boolean
          description: Whether benefit is active
        enrollmentRequirement:
          type: string
          description: Enrollment requirements
        effectiveDate:
          type: string
          format: date
          description: When benefit becomes effective
        endDate:
          type: string
          format: date
          description: When benefit ends (if applicable)
        eligibilityCriteria:
          type: string
          description: Eligibility criteria
        documents:
          type: array
          items:
            type: string
          description: Required documents
        provider:
          type: string
          description: Benefit provider
        contactInfo:
          type: object
          properties:
            phone:
              type: string
            email:
              type: string
            website:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BenefitCreate:
      type: object
      required:
        - name
        - description
        - type
        - category
        - cost
      properties:
        name:
          type: string
          description: Benefit name
        description:
          type: string
          description: Benefit description
        type:
          type: string
          enum:
            - HEALTH_INSURANCE
            - DENTAL_INSURANCE
            - VISION_INSURANCE
            - LIFE_INSURANCE
            - DISABILITY_INSURANCE
            - RETIREMENT_PLAN
            - PAID_TIME_OFF
            - SICK_LEAVE
            - MATERNITY_LEAVE
            - PATERNITY_LEAVE
            - EDUCATION_REIMBURSEMENT
            - TRANSPORTATION
            - MEAL_ALLOWANCE
            - GYM_MEMBERSHIP
            - OTHER
          description: Benefit type
        category:
          type: string
          enum:
            - INSURANCE
            - RETIREMENT
            - TIME_OFF
            - WELLNESS
            - PROFESSIONAL_DEVELOPMENT
            - LIFESTYLE
          description: Benefit category
        cost:
          type: number
          minimum: 0
          description: Cost to company
        employeeContribution:
          type: number
          minimum: 0
          description: Employee contribution amount
        employeeContributionPercentage:
          type: number
          minimum: 0
          maximum: 100
          description: Employee contribution percentage
        enrollmentRequirement:
          type: string
          description: Enrollment requirements
        effectiveDate:
          type: string
          format: date
          description: When benefit becomes effective
        eligibilityCriteria:
          type: string
          description: Eligibility criteria
        provider:
          type: string
          description: Benefit provider
        contactInfo:
          type: object
          properties:
            phone:
              type: string
            email:
              type: string
            website:
              type: string
    BenefitUpdate:
      type: object
      properties:
        name:
          type: string
          description: Benefit name
        description:
          type: string
          description: Benefit description
        type:
          type: string
          enum:
            - HEALTH_INSURANCE
            - DENTAL_INSURANCE
            - VISION_INSURANCE
            - LIFE_INSURANCE
            - DISABILITY_INSURANCE
            - RETIREMENT_PLAN
            - PAID_TIME_OFF
            - SICK_LEAVE
            - MATERNITY_LEAVE
            - PATERNITY_LEAVE
            - EDUCATION_REIMBURSEMENT
            - TRANSPORTATION
            - MEAL_ALLOWANCE
            - GYM_MEMBERSHIP
            - OTHER
          description: Benefit type
        category:
          type: string
          enum:
            - INSURANCE
            - RETIREMENT
            - TIME_OFF
            - WELLNESS
            - PROFESSIONAL_DEVELOPMENT
            - LIFESTYLE
          description: Benefit category
        cost:
          type: number
          minimum: 0
          description: Cost to company
        employeeContribution:
          type: number
          minimum: 0
          description: Employee contribution amount
        employeeContributionPercentage:
          type: number
          minimum: 0
          maximum: 100
          description: Employee contribution percentage
        isActive:
          type: boolean
          description: Whether benefit is active
        enrollmentRequirement:
          type: string
          description: Enrollment requirements
        effectiveDate:
          type: string
          format: date
          description: When benefit becomes effective
        endDate:
          type: string
          format: date
          description: When benefit ends (if applicable)
        eligibilityCriteria:
          type: string
          description: Eligibility criteria
        provider:
          type: string
          description: Benefit provider
        contactInfo:
          type: object
          properties:
            phone:
              type: string
            email:
              type: string
            website:
              type: string
    EmployeeBenefit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for employee benefit enrollment
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        benefitId:
          type: string
          format: uuid
          description: Benefit ID
        enrollmentStatus:
          type: string
          enum:
            - ENROLLED
            - PENDING
            - ACTIVE
            - SUSPENDED
            - TERMINATED
          description: Enrollment status
        enrollmentDate:
          type: string
          format: date
          description: Enrollment date
        effectiveDate:
          type: string
          format: date
          description: When benefit becomes effective
        endDate:
          type: string
          format: date
          description: When benefit ends
        employeeContribution:
          type: number
          description: Employee contribution amount
        companyContribution:
          type: number
          description: Company contribution amount
        dependents:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              relationship:
                type: string
              dateOfBirth:
                type: string
                format: date
        policyNumber:
          type: string
          description: Policy or group number
        groupNumber:
          type: string
          description: Group number
        notes:
          type: string
          description: Additional notes
        terminatedAt:
          type: string
          format: date-time
          description: When benefit was terminated
        terminationReason:
          type: string
          description: Reason for termination
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    EmployeeBenefitEnrollment:
      type: object
      required:
        - employeeId
        - benefitId
        - enrollmentDate
        - effectiveDate
      properties:
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        benefitId:
          type: string
          format: uuid
          description: Benefit ID
        enrollmentDate:
          type: string
          format: date
          description: Enrollment date
        effectiveDate:
          type: string
          format: date
          description: When benefit becomes effective
        endDate:
          type: string
          format: date
          description: When benefit ends
        employeeContribution:
          type: number
          minimum: 0
          description: Employee contribution amount
        dependents:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              relationship:
                type: string
              dateOfBirth:
                type: string
                format: date
        policyNumber:
          type: string
          description: Policy or group number
        groupNumber:
          type: string
          description: Group number
        notes:
          type: string
          description: Additional notes
    CompensationAnalytics:
      type: object
      properties:
        totalEmployees:
          type: integer
          description: Total number of employees
        averageSalary:
          type: number
          description: Average salary across all employees
        medianSalary:
          type: number
          description: Median salary
        salaryRange:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
        departmentSalaryComparison:
          type: array
          items:
            type: object
            properties:
              department:
                type: string
              averageSalary:
                type: number
              employeeCount:
                type: integer
        salaryGrowth:
          type: array
          items:
            type: object
            properties:
              year:
                type: integer
              averageSalary:
                type: number
              percentageChange:
                type: number
        bonusDistribution:
          type: array
          items:
            type: object
            properties:
              bonusType:
                type: string
              totalAmount:
                type: number
              employeeCount:
                type: integer
        benefitCosts:
          type: array
          items:
            type: object
            properties:
              benefitType:
                type: string
              totalCost:
                type: number
              employeeCount:
                type: integer
        compensationRatio:
          type: number
          description: Ratio of highest to lowest salary
    Onboarding:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        startDate:
          type: string
          format: date
          description: Onboarding start date
        status:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
            - ON_HOLD
            - CANCELLED
          description: Current onboarding status
        phase:
          type: string
          enum:
            - PRE_BOARDING
            - FIRST_DAY
            - FIRST_WEEK
            - FIRST_MONTH
            - COMPLETION
          description: Current onboarding phase
        assignedHR:
          type: string
          description: Assigned HR manager
        estimatedCompletionDate:
          type: string
          format: date
          description: Estimated completion date
        actualCompletionDate:
          type: string
          format: date
          description: Actual completion date
        notes:
          type: string
          description: Additional notes
        customFields:
          type: object
          description: Custom onboarding fields
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    OnboardingCreate:
      type: object
      required:
        - employeeId
        - startDate
      properties:
        employeeId:
          type: string
          format: uuid
          description: Employee ID
        startDate:
          type: string
          format: date
          description: Onboarding start date
        assignedHR:
          type: string
          description: Assigned HR manager
        estimatedCompletionDate:
          type: string
          format: date
          description: Estimated completion date
        notes:
          type: string
          description: Additional notes
        customFields:
          type: object
          description: Custom onboarding fields
    OnboardingTask:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
        onboardingId:
          type: integer
          description: Onboarding process ID
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        category:
          type: string
          enum:
            - PAPERWORK
            - TRAINING
            - EQUIPMENT
            - ORIENTATION
            - COMPLIANCE
            - OTHER
          description: Task category
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: Task priority
        status:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
            - ON_HOLD
            - CANCELLED
          description: Task status
        assignedTo:
          type: string
          description: Person assigned to the task
        dueDate:
          type: string
          format: date
          description: Task due date
        completedDate:
          type: string
          format: date
          description: Task completion date
        orderIndex:
          type: integer
          description: Task order in the sequence
        isMandatory:
          type: boolean
          description: Whether the task is mandatory
        estimatedDuration:
          type: integer
          description: Estimated duration in hours
        actualDuration:
          type: integer
          description: Actual duration in hours
        notes:
          type: string
          description: Additional notes
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    OnboardingTaskCreate:
      type: object
      required:
        - onboardingId
        - title
        - category
        - priority
      properties:
        onboardingId:
          type: integer
          description: Onboarding process ID
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        category:
          type: string
          enum:
            - PAPERWORK
            - TRAINING
            - EQUIPMENT
            - ORIENTATION
            - COMPLIANCE
            - OTHER
          description: Task category
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: Task priority
        assignedTo:
          type: string
          description: Person assigned to the task
        dueDate:
          type: string
          format: date
          description: Task due date
        orderIndex:
          type: integer
          description: Task order in the sequence
        isMandatory:
          type: boolean
          default: true
          description: Whether the task is mandatory
        estimatedDuration:
          type: integer
          description: Estimated duration in hours
        notes:
          type: string
          description: Additional notes
    TaskStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
            - ON_HOLD
            - CANCELLED
          description: New task status
        completedDate:
          type: string
          format: date
          description: Task completion date
        actualDuration:
          type: integer
          description: Actual duration in hours
        notes:
          type: string
          description: Additional notes
    OnboardingTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
        name:
          type: string
          description: Template name
        description:
          type: string
          description: Template description
        departmentId:
          type: string
          format: uuid
          description: Department this template applies to
        position:
          type: string
          description: Position this template applies to
        isDefault:
          type: boolean
          description: Whether this is the default template
        phases:
          type: array
          items:
            type: object
            properties:
              phase:
                type: string
                enum:
                  - PRE_BOARDING
                  - FIRST_DAY
                  - FIRST_WEEK
                  - FIRST_MONTH
                  - FIRST_QUARTER
              duration:
                type: integer
                description: Duration in days
              tasks:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    category:
                      type: string
                    priority:
                      type: string
                    orderIndex:
                      type: integer
                    isMandatory:
                      type: boolean
                    estimatedDuration:
                      type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    OnboardingTemplateCreate:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Template name
        description:
          type: string
          description: Template description
        departmentId:
          type: string
          format: uuid
          description: Department this template applies to
        position:
          type: string
          description: Position this template applies to
        isDefault:
          type: boolean
          default: false
          description: Whether this is the default template
        phases:
          type: array
          items:
            type: object
            properties:
              phase:
                type: string
                enum:
                  - PRE_BOARDING
                  - FIRST_DAY
                  - FIRST_WEEK
                  - FIRST_MONTH
                  - FIRST_QUARTER
              duration:
                type: integer
                minimum: 1
                description: Duration in days
              tasks:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    category:
                      type: string
                    priority:
                      type: string
                    orderIndex:
                      type: integer
                    isMandatory:
                      type: boolean
                    estimatedDuration:
                      type: integer
    OnboardingAnalytics:
      type: object
      properties:
        totalOnboardings:
          type: integer
          description: Total number of onboarding processes
        activeOnboardings:
          type: integer
          description: Number of active onboarding processes
        completedThisMonth:
          type: integer
          description: Onboardings completed this month
        averageCompletionTime:
          type: number
          description: Average completion time in days
        phaseDistribution:
          type: array
          items:
            type: object
            properties:
              phase:
                type: string
              count:
                type: integer
              percentage:
                type: number
        taskCompletionRate:
          type: number
          description: Overall task completion rate percentage
        satisfactionTrend:
          type: array
          items:
            type: object
            properties:
              month:
                type: string
              averageRating:
                type: number
              count:
                type: integer
        departmentPerformance:
          type: array
          items:
            type: object
            properties:
              department:
                type: string
              averageCompletionTime:
                type: number
              satisfactionRating:
                type: number
              taskCompletionRate:
                type: number
        commonChallenges:
          type: array
          items:
            type: object
            properties:
              challenge:
                type: string
              frequency:
                type: integer
              percentage:
                type: number
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the document
        leaveRequestId:
          type: string
          format: uuid
          description: ID of the leave request this document is attached to
        cloudinaryPublicId:
          type: string
          description: Cloudinary public ID for file management
        cloudinaryUrl:
          type: string
          description: Cloudinary URL to access the file
        uploadedById:
          type: string
          format: uuid
          description: ID of the user who uploaded the document
        leaveRequest:
          $ref: '#/components/schemas/LeaveRequest'
        createdAt:
          type: string
          format: date-time
          description: When the document was uploaded
      required:
        - leaveRequestId
        - cloudinaryPublicId
        - cloudinaryUrl
        - uploadedById
    DocumentResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        pagination:
          $ref: '#/components/schemas/Pagination'
    FileValidation:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the file is valid
        errors:
          type: array
          items:
            type: string
          description: List of validation errors if file is invalid
        warnings:
          type: array
          items:
            type: string
          description: List of validation warnings
    FileUpload:
      type: object
      properties:
        document:
          type: string
          format: binary
          description: Document file to upload
        description:
          type: string
          description: Optional description for the document
    AuditLog:
      type: object
      description: Simplified audit log for security events only
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the audit log
        userId:
          type: string
          description: ID of the user who performed the action
        action:
          type: string
          enum:
            - LOGIN
            - LOGOUT
            - LOGIN_FAILED
            - ROLE_CHANGE
            - USER_STATUS_CHANGE
            - LEAVE_APPROVED
            - LEAVE_REJECTED
            - PASSWORD_CHANGE
            - PASSWORD_RESET
            - CRITICAL_UPDATE
          description: Type of security action performed
        entityType:
          type: string
          enum:
            - User
            - LeaveRequest
            - System
          description: Type of entity affected
        entityId:
          type: string
          description: ID of the affected entity (optional)
        description:
          type: string
          description: Human-readable description of the action
        ipAddress:
          type: string
          description: IP address of the user (optional)
        userAgent:
          type: string
          description: User agent string (optional)
        timestamp:
          type: string
          format: date-time
          description: When the action occurred
      required:
        - userId
        - action
        - entityType
        - timestamp
    SecurityEventResponse:
      type: object
      description: Response for security events endpoint
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        count:
          type: integer
          description: Number of events returned
    CleanupRequest:
      type: object
      description: Request body for audit cleanup
      properties:
        retentionDays:
          type: integer
          default: 90
          minimum: 30
          maximum: 365
          description: Number of days to retain logs
    CleanupResponse:
      type: object
      description: Response for audit cleanup endpoint
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message
        deletedCount:
          type: integer
          description: Number of logs deleted
    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        role:
          type: string
          description: User's role name
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPENDED
          description: User account status
        profilePicture:
          type: string
          nullable: true
          description: URL to user's profile picture
        hasEmployeeRecord:
          type: boolean
          description: Whether user has an associated employee record
        employeeId:
          type: string
          format: uuid
          nullable: true
          description: Associated employee ID (if exists)
        department:
          type: string
          nullable: true
          description: Department name (if employee)
        position:
          type: string
          nullable: true
          description: Position (if employee)
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        email: john.doe@company.com
        firstName: John
        lastName: Doe
        role: EMPLOYEE
        status: ACTIVE
        profilePicture: https://res.cloudinary.com/example/image/upload/profile-pictures/abc123
        hasEmployeeRecord: true
        employeeId: 456e7890-e89b-12d3-a456-426614174000
        department: IT
        position: Software Developer
        createdAt: '2024-01-01T00:00:00Z'
        updatedAt: '2024-01-01T00:00:00Z'
    ProfileUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
          description: User's first name
          example: John
        lastName:
          type: string
          description: User's last name
          example: Doe
        profilePicture:
          type: string
          format: binary
          description: Profile picture file (optional)
      example:
        firstName: John
        lastName: Doe
    ProfileUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether update was successful
        message:
          type: string
          description: Response message
        data:
          $ref: '#/components/schemas/UserInfo'
      example:
        success: true
        message: Profile updated successfully
        data:
          id: 123e4567-e89b-12d3-a456-426614174000
          firstName: John
          lastName: Doe
          email: john.doe@company.com
          profilePicture: https://res.cloudinary.com/example/image/upload/profile-pictures/abc123
          role: EMPLOYEE
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique notification identifier
        recipientId:
          type: string
          format: uuid
          description: ID of the employee receiving the notification
        recipient:
          $ref: '#/components/schemas/Employee'
          description: Employee receiving the notification
        title:
          type: string
          description: Notification title
        message:
          type: string
          description: Notification message content
        relatedEntityId:
          type: string
          format: uuid
          nullable: true
          description: ID of the related entity (e.g., leave request ID)
        entityType:
          type: string
          nullable: true
          description: Type of related entity (e.g., 'LEAVE_REQUEST')
        type:
          type: string
          enum:
            - LEAVE_SUBMITTED
            - LEAVE_APPROVED
            - LEAVE_REJECTED
            - LEAVE_REMINDER
            - APPROVAL_PENDING
            - LEAVE_CANCELLED
          description: Type of notification
        read:
          type: boolean
          description: Whether the notification has been read
        createdAt:
          type: string
          format: date-time
          description: When the notification was created
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        recipientId: 456e7890-e89b-12d3-a456-426614174000
        title: Leave Request Approved
        message: Your leave request for January 15-19, 2024 has been approved.
        relatedEntityId: 789e0123-e89b-12d3-a456-426614174000
        entityType: LEAVE_REQUEST
        type: LEAVE_APPROVED
        read: false
        createdAt: '2024-01-10T10:30:00Z'
    NotificationPreferences:
      type: object
      properties:
        emailNotifications:
          type: boolean
          description: Enable/disable email notifications
        pushNotifications:
          type: boolean
          description: Enable/disable push notifications
        leaveRequestNotifications:
          type: boolean
          description: Enable/disable leave request notifications
        approvalNotifications:
          type: boolean
          description: Enable/disable approval notifications
        reminderNotifications:
          type: boolean
          description: Enable/disable reminder notifications
      example:
        emailNotifications: true
        pushNotifications: true
        leaveRequestNotifications: true
        approvalNotifications: true
        reminderNotifications: false
    NotificationPreferencesUpdate:
      type: object
      properties:
        emailNotifications:
          type: boolean
          description: Enable/disable email notifications
        pushNotifications:
          type: boolean
          description: Enable/disable push notifications
        leaveRequestNotifications:
          type: boolean
          description: Enable/disable leave request notifications
        approvalNotifications:
          type: boolean
          description: Enable/disable approval notifications
        reminderNotifications:
          type: boolean
          description: Enable/disable reminder notifications
      example:
        emailNotifications: true
        pushNotifications: false
        leaveRequestNotifications: true
        approvalNotifications: true
        reminderNotifications: false
paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: |
        Register a new user account with GUEST role. 
        - User is assigned GUEST role initially
        - Welcome email sent with verification link
        - Email verification required before full access
        - HR/Admin must create employee profile to upgrade to EMPLOYEE role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully with GUEST role. Email verification required before login.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully with GUEST role. Welcome email sent with verification link.
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                        description: User's unique identifier
                      email:
                        type: string
                        format: email
                        description: User's email address
                      firstName:
                        type: string
                        description: User's first name
                      lastName:
                        type: string
                        description: User's last name
                      role:
                        type: string
                        enum:
                          - GUEST
                        description: Initial role assigned (always GUEST)
                      emailVerified:
                        type: boolean
                        example: false
                        description: Email verification status (always false on registration)
                      message:
                        type: string
                        example: Registration successful. Please check your email to verify your account before logging in.
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '500':
          description: Internal server error
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: |
        Authenticate user and return JWT token.
        **Note**: Email verification is required before login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials or email not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Please verify your email address before logging in. Check your inbox for the verification link.
                  error:
                    type: string
                    example: Please verify your email address before logging in. Check your inbox for the verification link.
        '500':
          description: Internal server error
  /api/auth/google:
    get:
      tags:
        - Authentication
      summary: Google OAuth login
      description: Initiate Google OAuth authentication flow
      responses:
        '302':
          description: Redirect to Google OAuth
        '500':
          description: Internal server error
  /api/auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      description: Handle Google OAuth callback and authenticate user
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from Google
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: State parameter for CSRF protection
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Google authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '500':
          description: Internal server error
  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '500':
          description: Internal server error
  /api/auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change user password
      description: Change current user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid current password
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: User not found
        '500':
          description: Internal server error
  /api/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password using reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid or expired token
        '500':
          description: Internal server error
  /api/auth/verify-email/{token}:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user's email address using verification token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Email verification token
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid or expired token
        '500':
          description: Internal server error
  /api/auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend email verification
      description: Resend email verification link to user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid email
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get current user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/auth/users:
    get:
      tags:
        - User Management
      summary: Get all users
      description: Get list of all users (Admin/HR Manager only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of users per page
        - name: role
          in: query
          schema:
            type: string
          description: Filter by role
        - name: status
          in: query
          schema:
            type: string
          description: Filter by status
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/auth/users/{userId}/roles:
    put:
      tags:
        - User Management
      summary: Update user role
      description: Update user's role (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleRequest'
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
        '500':
          description: Internal server error
  /api/auth/users/{userId}/status:
    put:
      tags:
        - User Management
      summary: Update user status
      description: Update user's account status (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusRequest'
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
        '500':
          description: Internal server error
  /api/auth/users/{userId}:
    delete:
      tags:
        - User Management
      summary: Delete user
      description: Delete user account (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
        '500':
          description: Internal server error
  /api/auth/status:
    get:
      tags:
        - Authentication
      summary: Get user onboarding status
      description: |
        Get comprehensive user status including role, email verification, and employee profile status.
        Useful for GUEST users to check their onboarding progress and next steps.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                        description: User's unique identifier
                      email:
                        type: string
                        format: email
                        description: User's email address
                      firstName:
                        type: string
                        description: User's first name
                      lastName:
                        type: string
                        description: User's last name
                      role:
                        type: string
                        enum:
                          - GUEST
                          - EMPLOYEE
                          - MANAGER
                          - HR_MANAGER
                          - ADMIN
                        description: Current user role
                      emailVerified:
                        type: boolean
                        description: Whether user's email is verified
                      hasEmployeeProfile:
                        type: boolean
                        description: Whether user has an employee profile
                      needsEmployeeProfile:
                        type: boolean
                        description: Whether GUEST user needs HR to create employee profile
                      status:
                        type: string
                        enum:
                          - GUEST_AWAITING_PROFILE
                          - PENDING_APPROVAL
                          - ACTIVE_EMPLOYEE
                        description: Overall user status in the onboarding process
                    example:
                      userId: 123e4567-e89b-12d3-a456-426614174000
                      email: john.doe@company.com
                      firstName: John
                      lastName: Doe
                      role: GUEST
                      emailVerified: true
                      hasEmployeeProfile: false
                      needsEmployeeProfile: true
                      status: GUEST_AWAITING_PROFILE
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
  /api/employees/my-department:
    get:
      tags:
        - Employees
      summary: Get my department employees
      description: Get employees in the manager's department (Manager only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for employee name, email, or position
        - in: query
          name: position
          schema:
            type: string
            enum:
              - EMPLOYEE
              - MANAGER
              - HR_MANAGER
              - ADMIN
          description: Filter by position
        - in: query
          name: status
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
              - TERMINATED
              - ON_LEAVE
          description: Filter by status
      responses:
        '200':
          description: Department employees retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only managers can access this endpoint
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/employees:
    get:
      tags:
        - Employees
      summary: Get all employees
      description: Retrieve a list of all employees with pagination and filtering
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - in: query
          name: departmentId
          schema:
            type: string
            format: uuid
          description: Filter by department
        - in: query
          name: status
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
              - TERMINATED
              - ON_LEAVE
          description: Filter by status
      responses:
        '200':
          description: Employees retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      tags:
        - Employees
      summary: Create employee profile
      description: |
        Create an employee profile for an existing user (HR/Admin only).
        This action:
        - Creates employee record for existing user
        - Updates user role from GUEST to EMPLOYEE (if applicable)
        - Sends professional welcome email notification to employee
        - Grants full employee access and permissions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
      responses:
        '201':
          description: Employee profile created successfully. Role updated and notification sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Employee profile created successfully. User role updated to EMPLOYEE and notification sent.
                  data:
                    type: object
                    properties:
                      employee:
                        $ref: '#/components/schemas/Employee'
                      roleChanged:
                        type: boolean
                        description: Whether user role was changed from GUEST to EMPLOYEE
                        example: true
                      emailSent:
                        type: boolean
                        description: Whether employee assignment email was sent
                        example: true
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/employees/search:
    get:
      tags:
        - Employees
      summary: Search employees
      description: Search employees with various filters
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query for name, email, or position
        - in: query
          name: departmentId
          schema:
            type: string
            format: uuid
          description: Filter by department
        - in: query
          name: status
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
              - TERMINATED
              - ON_LEAVE
          description: Filter by status
        - in: query
          name: managerId
          schema:
            type: string
            format: uuid
          description: Filter by manager
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/employees/{id}:
    get:
      tags:
        - Employees
      summary: Get employee by ID
      description: Retrieve a specific employee by their ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '200':
          description: Employee retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Internal server error
    put:
      tags:
        - Employees
      summary: Update employee
      description: Update an existing employee record
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeUpdate'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Employees
      summary: Delete employee
      description: Delete an employee record
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '200':
          description: Employee deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/departments:
    get:
      tags:
        - Departments
      summary: Get all departments
      description: Retrieve a list of all departments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Departments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      tags:
        - Departments
      summary: Create new department
      description: Create a new department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreate'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/departments/{id}:
    get:
      tags:
        - Departments
      summary: Get department by ID
      description: Retrieve a specific department by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Department ID
      responses:
        '200':
          description: Department retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
        '404':
          description: Department not found
        '500':
          description: Internal server error
    put:
      tags:
        - Departments
      summary: Update department
      description: Update an existing department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Department ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpdate'
      responses:
        '200':
          description: Department updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Department not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Departments
      summary: Delete department
      description: Delete a department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Department ID
      responses:
        '200':
          description: Department deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Department not found
        '500':
          description: Internal server error
  /api/leave-requests/my-leaves:
    get:
      tags:
        - Leave Management
      summary: Get my leave requests
      description: |
        Retrieve authenticated user's leave requests with pagination and filtering.
        **Access**: EMPLOYEE, MANAGER, HR_MANAGER, ADMIN only. GUEST users cannot access.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - in: query
          name: status
          schema:
            type: string
            enum:
              - PENDING
              - APPROVED
              - REJECTED
              - CANCELLED
          description: Filter by status
        - in: query
          name: leaveTypeId
          schema:
            type: string
            format: uuid
          description: Filter by leave type
        - in: query
          name: year
          schema:
            type: integer
            minimum: 2020
            maximum: 2050
          description: Filter by year
      responses:
        '200':
          description: Leave requests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveRequest'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/leave-requests/team:
    get:
      tags:
        - Leave Management
      summary: Get team leave requests
      description: Get approved leave requests for manager's team (Manager/Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Team leave requests retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaveRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only managers can access team leaves
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/leave-requests/department/{departmentId}:
    get:
      tags:
        - Leave Management
      summary: Get leave requests by department
      description: Get leave requests for a specific department (HR/Admin/Department Manager only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: departmentId
          required: true
          schema:
            type: string
            format: uuid
          description: Department ID
      responses:
        '200':
          description: Department leave requests retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaveRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Department not found
        '500':
          description: Internal server error
  /api/leave-requests:
    get:
      tags:
        - Leave Management
      summary: Get all leave requests
      description: Retrieve a list of all leave requests with pagination and filtering
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - in: query
          name: status
          schema:
            type: string
            enum:
              - PENDING
              - APPROVED
              - REJECTED
              - CANCELLED
          description: Filter by status
      responses:
        '200':
          description: Leave requests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveRequest'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      tags:
        - Leave Management
      summary: Create leave request
      description: |
        Create a new leave request.
        **Access**: EMPLOYEE, MANAGER, HR_MANAGER, ADMIN only. GUEST users cannot create leave requests.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveRequestCreate'
      responses:
        '201':
          description: Leave request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequest'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/leave-requests/{id}:
    get:
      tags:
        - Leave Management
      summary: Get leave request by ID
      description: Retrieve a specific leave request by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Leave request ID
      responses:
        '200':
          description: Leave request retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequest'
        '401':
          description: Unauthorized
        '404':
          description: Leave request not found
        '500':
          description: Internal server error
  /api/leave-types:
    get:
      tags:
        - Leave Management
      summary: Get all leave types
      description: Retrieve a list of all leave types
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Leave types retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveType'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    post:
      tags:
        - Leave Management
      summary: Create leave type
      description: Create a new leave type (HR/Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveTypeCreate'
      responses:
        '201':
          description: Leave type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveType'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions
        '500':
          description: Internal server error
  /api/leave-types/{id}:
    get:
      tags:
        - Leave Management
      summary: Get leave type by ID
      description: Retrieve a specific leave type by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Leave type ID
      responses:
        '200':
          description: Leave type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveType'
        '401':
          description: Unauthorized
        '404':
          description: Leave type not found
        '500':
          description: Internal server error
    put:
      tags:
        - Leave Management
      summary: Update leave type
      description: Update an existing leave type (HR/Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Leave type ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveTypeUpdate'
      responses:
        '200':
          description: Leave type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveType'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Leave type not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Leave Management
      summary: Delete leave type
      description: Delete a leave type (HR/Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Leave type ID
      responses:
        '200':
          description: Leave type deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Leave type not found
        '500':
          description: Internal server error
  /api/leave-balances:
    get:
      tags:
        - Leave Management
      summary: Get leave balances
      description: Retrieve leave balances for the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Leave balances retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveBalance'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/leave-balances/my-balances:
    get:
      tags:
        - Leave Management
      summary: Get my leave balances
      description: Retrieve leave balances for the current authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Leave balances retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveBalance'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/leave-balances/employee/{employeeId}:
    get:
      tags:
        - Leave Management
      summary: Get employee leave balances
      description: Retrieve leave balances for a specific employee (HR/Admin/Manager only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: employeeId
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '200':
          description: Employee leave balances retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveBalance'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/leave-balances/adjust:
    post:
      tags:
        - Leave Management
      summary: Adjust leave balance
      description: Adjust leave balance for an employee (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveBalanceAdjustment'
      responses:
        '200':
          description: Leave balance adjusted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveBalance'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Employee or leave type not found
        '500':
          description: Internal server error
  /api/hr/dashboard:
    get:
      tags:
        - HR Management
      summary: Get HR dashboard summary
      description: Retrieve HR dashboard overview and statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: HR dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HRDashboardSummary'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/hr/overview:
    get:
      tags:
        - HR Management
      summary: Get employee overview
      description: Retrieve employee overview statistics and data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Employee overview retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeOverview'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/hr/analytics:
    get:
      tags:
        - HR Management
      summary: Get employee analytics
      description: Retrieve detailed employee analytics and insights
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Employee analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeAnalytics'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/hr/reports:
    get:
      tags:
        - HR Management
      summary: Get HR reports
      description: Retrieve available HR reports
      security:
        - bearerAuth: []
      responses:
        '200':
          description: HR reports retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HRReport'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/recruitment/job-postings:
    post:
      tags:
        - Recruitment
      summary: Create a new job posting
      description: Create a new job posting for recruitment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostingCreate'
      responses:
        '201':
          description: Job posting created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosting'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/recruitment/job-postings/{id}:
    put:
      tags:
        - Recruitment
      summary: Update a job posting
      description: Update an existing job posting
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Job posting ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostingUpdate'
      responses:
        '200':
          description: Job posting updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosting'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Job posting not found
        '500':
          description: Internal server error
  /api/recruitment/job-postings/{id}/publish:
    post:
      tags:
        - Recruitment
      summary: Publish a job posting
      description: Publish a draft job posting to make it visible to candidates
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Job posting ID
      responses:
        '200':
          description: Job posting published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosting'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Job posting not found
        '500':
          description: Internal server error
  /api/recruitment/job-postings/{id}/close:
    post:
      tags:
        - Recruitment
      summary: Close a job posting
      description: Close an active job posting to stop accepting applications
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Job posting ID
      responses:
        '200':
          description: Job posting closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosting'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Job posting not found
        '500':
          description: Internal server error
  /api/recruitment/job-postings/search:
    get:
      tags:
        - Recruitment
      summary: Search job postings
      description: Search and filter job postings
      security:
        - bearerAuth: []
      parameters:
        - name: title
          in: query
          schema:
            type: string
          description: Job title to search for
        - name: department
          in: query
          schema:
            type: string
          description: Department filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - DRAFT
              - PUBLISHED
              - CLOSED
              - ARCHIVED
          description: Job posting status
        - name: employmentType
          in: query
          schema:
            type: string
            enum:
              - FULL_TIME
              - PART_TIME
              - CONTRACT
              - INTERNSHIP
          description: Employment type
        - name: location
          in: query
          schema:
            type: string
          description: Location filter
        - name: remoteWork
          in: query
          schema:
            type: boolean
          description: Remote work availability
        - name: page
          in: query
          schema:
            type: string
            format: uuid
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: string
            format: uuid
            default: 10
          description: Items per page
      responses:
        '200':
          description: Job postings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobPostings:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobPosting'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/recruitment/applications:
    post:
      tags:
        - Recruitment
      summary: Submit a job application
      description: Submit a new job application for a job posting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobApplicationCreate'
      responses:
        '201':
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /api/recruitment/applications/{id}/status:
    put:
      tags:
        - Recruitment
      summary: Update application status
      description: Update the status of a job application
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Application ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationStatusUpdate'
      responses:
        '200':
          description: Application status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Application not found
        '500':
          description: Internal server error
  /api/recruitment/applications/search:
    get:
      tags:
        - Recruitment
      summary: Search job applications
      description: Search and filter job applications
      security:
        - bearerAuth: []
      parameters:
        - name: jobPostingId
          in: query
          schema:
            type: string
            format: uuid
          description: Job posting ID filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - APPLIED
              - UNDER_REVIEW
              - SHORTLISTED
              - INTERVIEW_SCHEDULED
              - INTERVIEW_COMPLETED
              - OFFER_MADE
              - HIRED
              - REJECTED
              - WITHDRAWN
          description: Application status
        - name: applicantName
          in: query
          schema:
            type: string
          description: Applicant name to search for
        - name: applicantEmail
          in: query
          schema:
            type: string
          description: Applicant email filter
        - name: page
          in: query
          schema:
            type: string
            format: uuid
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: string
            format: uuid
            default: 10
          description: Items per page
      responses:
        '200':
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobApplication'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/recruitment/interviews:
    post:
      tags:
        - Recruitment
      summary: Schedule an interview
      description: Schedule a new interview for a job application
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewCreate'
      responses:
        '201':
          description: Interview scheduled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/recruitment/interviews/{id}/status:
    put:
      tags:
        - Recruitment
      summary: Update interview status
      description: Update the status of an interview
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Interview ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewStatusUpdate'
      responses:
        '200':
          description: Interview status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Interview not found
        '500':
          description: Internal server error
  /api/recruitment/interviews/search:
    get:
      tags:
        - Recruitment
      summary: Search interviews
      description: Search and filter interviews
      security:
        - bearerAuth: []
      parameters:
        - name: applicationId
          in: query
          schema:
            type: string
            format: uuid
          description: Job application ID filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - SCHEDULED
              - IN_PROGRESS
              - COMPLETED
              - CANCELLED
              - RESCHEDULED
          description: Interview status
        - name: type
          in: query
          schema:
            type: string
            enum:
              - PHONE_SCREEN
              - TECHNICAL
              - BEHAVIORAL
              - FINAL
              - PANEL
          description: Interview type
        - name: scheduledDate
          in: query
          schema:
            type: string
            format: date
          description: Scheduled date filter
        - name: page
          in: query
          schema:
            type: string
            format: uuid
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: string
            format: uuid
            default: 10
          description: Items per page
      responses:
        '200':
          description: Interviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  interviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Interview'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/recruitment/analytics:
    get:
      tags:
        - Recruitment
      summary: Get recruitment analytics
      description: Get comprehensive analytics and metrics for recruitment
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for analytics period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for analytics period
        - name: department
          in: query
          schema:
            type: string
          description: Department filter for analytics
      responses:
        '200':
          description: Analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecruitmentAnalytics'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/compensation/salaries:
    post:
      tags:
        - Compensation
      summary: Create a new salary record
      description: Create a new salary record for an employee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalaryCreate'
      responses:
        '201':
          description: Salary record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Salary'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/compensation/salaries/{id}:
    put:
      tags:
        - Compensation
      summary: Update a salary record
      description: Update an existing salary record
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Salary record ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalaryUpdate'
      responses:
        '200':
          description: Salary record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Salary'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Salary record not found
        '500':
          description: Internal server error
  /api/compensation/salaries/employee/{employeeId}/history:
    get:
      tags:
        - Compensation
      summary: Get employee salary history
      description: Get complete salary history for an employee
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for salary history
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for salary history
      responses:
        '200':
          description: Salary history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Salary'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/compensation/salaries/employee/{employeeId}/current:
    get:
      tags:
        - Compensation
      summary: Get employee current salary
      description: Get the current active salary for an employee
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '200':
          description: Current salary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Salary'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Employee or current salary not found
        '500':
          description: Internal server error
  /api/compensation/salaries/search:
    get:
      tags:
        - Compensation
      summary: Search salary records
      description: Search and filter salary records
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: query
          schema:
            type: string
            format: uuid
          description: Employee ID filter
        - name: type
          in: query
          schema:
            type: string
            enum:
              - BASE_SALARY
              - HOURLY_RATE
              - COMMISSION
              - BONUS
              - ALLOWANCE
          description: Salary type filter
        - name: payFrequency
          in: query
          schema:
            type: string
            enum:
              - HOURLY
              - DAILY
              - WEEKLY
              - BI_WEEKLY
              - MONTHLY
              - ANNUALLY
          description: Pay frequency filter
        - name: minAmount
          in: query
          schema:
            type: number
          description: Minimum salary amount
        - name: maxAmount
          in: query
          schema:
            type: number
          description: Maximum salary amount
        - name: effectiveDate
          in: query
          schema:
            type: string
            format: date
          description: Effective date filter
        - name: page
          in: query
          schema:
            type: string
            format: uuid
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: string
            format: uuid
            default: 10
          description: Items per page
      responses:
        '200':
          description: Salary records retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  salaries:
                    type: array
                    items:
                      $ref: '#/components/schemas/Salary'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/compensation/bonuses:
    post:
      tags:
        - Compensation
      summary: Create a new bonus record
      description: Create a new bonus record for an employee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusCreate'
      responses:
        '201':
          description: Bonus record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bonus'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/compensation/bonuses/{id}/status:
    put:
      tags:
        - Compensation
      summary: Update bonus status
      description: Update the status of a bonus record
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Bonus record ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusStatusUpdate'
      responses:
        '200':
          description: Bonus status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bonus'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Bonus record not found
        '500':
          description: Internal server error
  /api/compensation/bonuses/search:
    get:
      tags:
        - Compensation
      summary: Search bonus records
      description: Search and filter bonus records
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: query
          schema:
            type: string
            format: uuid
          description: Employee ID filter
        - name: type
          in: query
          schema:
            type: string
            enum:
              - PERFORMANCE
              - ANNUAL
              - SIGNING
              - RETENTION
              - REFERRAL
              - PROJECT
              - HOLIDAY
          description: Bonus type filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - PENDING
              - APPROVED
              - REJECTED
              - PAID
              - CANCELLED
          description: Bonus status filter
        - name: minAmount
          in: query
          schema:
            type: number
          description: Minimum bonus amount
        - name: maxAmount
          in: query
          schema:
            type: number
          description: Maximum bonus amount
        - name: effectiveDate
          in: query
          schema:
            type: string
            format: date
          description: Effective date filter
        - name: page
          in: query
          schema:
            type: string
            format: uuid
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: string
            format: uuid
            default: 10
          description: Items per page
      responses:
        '200':
          description: Bonus records retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bonuses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bonus'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/compensation/benefits:
    post:
      tags:
        - Compensation
      summary: Create a new benefit
      description: Create a new company benefit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenefitCreate'
      responses:
        '201':
          description: Benefit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Benefit'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/compensation/benefits/{id}:
    put:
      tags:
        - Compensation
      summary: Update a benefit
      description: Update an existing company benefit
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Benefit ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenefitUpdate'
      responses:
        '200':
          description: Benefit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Benefit'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Benefit not found
        '500':
          description: Internal server error
  /api/compensation/benefits/search:
    get:
      tags:
        - Compensation
      summary: Search benefits
      description: Search and filter company benefits
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Benefit name to search for
        - name: type
          in: query
          schema:
            type: string
            enum:
              - HEALTH_INSURANCE
              - DENTAL_INSURANCE
              - VISION_INSURANCE
              - LIFE_INSURANCE
              - DISABILITY_INSURANCE
              - RETIREMENT_PLAN
              - PENSION_PLAN
              - STOCK_OPTIONS
              - PROFIT_SHARING
              - EDUCATION_REIMBURSEMENT
              - TRANSPORTATION
              - MEALS
              - FITNESS
              - CHILDCARE
              - OTHER
          description: Benefit type filter
        - name: category
          in: query
          schema:
            type: string
            enum:
              - INSURANCE
              - RETIREMENT
              - FINANCIAL
              - LIFESTYLE
              - PROFESSIONAL_DEVELOPMENT
              - OTHER
          description: Benefit category filter
        - name: active
          in: query
          schema:
            type: boolean
          description: Active status filter
        - name: page
          in: query
          schema:
            type: string
            format: uuid
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: string
            format: uuid
            default: 10
          description: Items per page
      responses:
        '200':
          description: Benefits retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  benefits:
                    type: array
                    items:
                      $ref: '#/components/schemas/Benefit'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/compensation/benefits/{benefitId}/enroll:
    post:
      tags:
        - Compensation
      summary: Enroll employee in benefit
      description: Enroll an employee in a specific benefit
      security:
        - bearerAuth: []
      parameters:
        - name: benefitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Benefit ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeBenefitEnrollment'
      responses:
        '201':
          description: Employee enrolled in benefit successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeBenefit'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Benefit not found
        '500':
          description: Internal server error
  /api/compensation/benefits/enrollment/{enrollmentId}/status:
    put:
      tags:
        - Compensation
      summary: Update benefit enrollment status
      description: Update the status of a benefit enrollment
      security:
        - bearerAuth: []
      parameters:
        - name: enrollmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Enrollment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
                    - PENDING
                    - TERMINATED
                  description: New enrollment status
                effectiveDate:
                  type: string
                  format: date
                  description: Effective date for status change
                notes:
                  type: string
                  description: Notes about the status change
      responses:
        '200':
          description: Enrollment status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeBenefit'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Enrollment not found
        '500':
          description: Internal server error
  /api/compensation/benefits/employee/{employeeId}:
    get:
      tags:
        - Compensation
      summary: Get employee benefits
      description: Get all benefits for a specific employee
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
        - name: status
          in: query
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
              - PENDING
              - TERMINATED
          description: Enrollment status filter
      responses:
        '200':
          description: Employee benefits retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeBenefit'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/compensation/analytics:
    get:
      tags:
        - Compensation
      summary: Get compensation analytics
      description: Get comprehensive analytics and metrics for compensation
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for analytics period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for analytics period
        - name: department
          in: query
          schema:
            type: string
          description: Department filter for analytics
      responses:
        '200':
          description: Analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompensationAnalytics'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/onboarding:
    post:
      tags:
        - Onboarding
      summary: Create a new onboarding process
      description: Create a new onboarding process for an employee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingCreate'
      responses:
        '201':
          description: Onboarding process created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Onboarding'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/onboarding/{id}/status:
    put:
      tags:
        - Onboarding
      summary: Update onboarding status
      description: Update the status of an onboarding process
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Onboarding ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - NOT_STARTED
                    - IN_PROGRESS
                    - COMPLETED
                    - ON_HOLD
                    - CANCELLED
                  description: New onboarding status
                notes:
                  type: string
                  description: Notes about the status change
      responses:
        '200':
          description: Onboarding status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Onboarding'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Onboarding process not found
        '500':
          description: Internal server error
  /api/onboarding/{id}/phase:
    put:
      tags:
        - Onboarding
      summary: Advance onboarding phase
      description: Advance the onboarding process to the next phase
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Onboarding ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phase:
                  type: string
                  enum:
                    - PRE_BOARDING
                    - FIRST_DAY
                    - FIRST_WEEK
                    - FIRST_MONTH
                    - COMPLETION
                  description: New onboarding phase
                notes:
                  type: string
                  description: Notes about the phase advancement
      responses:
        '200':
          description: Onboarding phase advanced successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Onboarding'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Onboarding process not found
        '500':
          description: Internal server error
  /api/onboarding/search:
    get:
      tags:
        - Onboarding
      summary: Search onboarding processes
      description: Search and filter onboarding processes
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: query
          schema:
            type: integer
          description: Employee ID filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - NOT_STARTED
              - IN_PROGRESS
              - COMPLETED
              - ON_HOLD
              - CANCELLED
          description: Onboarding status filter
        - name: phase
          in: query
          schema:
            type: string
            enum:
              - PRE_BOARDING
              - FIRST_DAY
              - FIRST_WEEK
              - FIRST_MONTH
              - COMPLETION
          description: Onboarding phase filter
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date filter
        - name: assignedHR
          in: query
          schema:
            type: string
          description: Assigned HR manager filter
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        '200':
          description: Onboarding processes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  onboardings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Onboarding'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/onboarding/{id}/progress:
    get:
      tags:
        - Onboarding
      summary: Get onboarding progress
      description: Get detailed progress information for an onboarding process
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Onboarding ID
      responses:
        '200':
          description: Onboarding progress retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  onboarding:
                    $ref: '#/components/schemas/Onboarding'
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/OnboardingTask'
                  progress:
                    type: object
                    properties:
                      totalTasks:
                        type: integer
                      completedTasks:
                        type: integer
                      completionPercentage:
                        type: number
                      estimatedCompletionDate:
                        type: string
                        format: date
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Onboarding process not found
        '500':
          description: Internal server error
  /api/onboarding/tasks:
    post:
      tags:
        - Onboarding
      summary: Create a new onboarding task
      description: Create a new task for an onboarding process
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingTaskCreate'
      responses:
        '201':
          description: Onboarding task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingTask'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/onboarding/tasks/{id}/status:
    put:
      tags:
        - Onboarding
      summary: Update task status
      description: Update the status of an onboarding task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusUpdate'
      responses:
        '200':
          description: Task status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingTask'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task not found
        '500':
          description: Internal server error
  /api/onboarding/tasks/search:
    get:
      tags:
        - Onboarding
      summary: Search onboarding tasks
      description: Search and filter onboarding tasks
      security:
        - bearerAuth: []
      parameters:
        - name: onboardingId
          in: query
          schema:
            type: integer
          description: Onboarding process ID filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - NOT_STARTED
              - IN_PROGRESS
              - COMPLETED
              - ON_HOLD
              - CANCELLED
          description: Task status filter
        - name: priority
          in: query
          schema:
            type: string
            enum:
              - LOW
              - MEDIUM
              - HIGH
              - CRITICAL
          description: Task priority filter
        - name: category
          in: query
          schema:
            type: string
            enum:
              - PAPERWORK
              - TRAINING
              - EQUIPMENT
              - ORIENTATION
              - COMPLIANCE
              - OTHER
          description: Task category filter
        - name: assignedTo
          in: query
          schema:
            type: string
          description: Assigned person filter
        - name: dueDate
          in: query
          schema:
            type: string
            format: date
          description: Due date filter
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        '200':
          description: Onboarding tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/OnboardingTask'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/onboarding/templates:
    post:
      tags:
        - Onboarding
      summary: Create onboarding template
      description: Create a new onboarding template for reuse
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingTemplateCreate'
      responses:
        '201':
          description: Onboarding template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingTemplate'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /api/onboarding/templates/{templateId}/clone:
    post:
      tags:
        - Onboarding
      summary: Clone onboarding from template
      description: Create a new onboarding process from an existing template
      security:
        - bearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: integer
          description: Template ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeId:
                  type: integer
                  description: Employee ID for the new onboarding
                startDate:
                  type: string
                  format: date
                  description: Start date for the onboarding
                assignedHR:
                  type: string
                  description: Assigned HR manager
                customFields:
                  type: object
                  description: Custom fields for the onboarding
      responses:
        '201':
          description: Onboarding process cloned from template successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Onboarding'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Template not found
        '500':
          description: Internal server error
  /api/onboarding/analytics:
    get:
      tags:
        - Onboarding
      summary: Get onboarding analytics
      description: Get comprehensive analytics and metrics for onboarding
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for analytics period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for analytics period
        - name: department
          in: query
          schema:
            type: string
          description: Department filter for analytics
      responses:
        '200':
          description: Analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingAnalytics'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/reports/leave-by-department:
    get:
      tags:
        - Reports
      summary: Get leave reports by department
      description: Generate leave reports filtered by department
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for report period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for report period
        - name: departmentId
          in: query
          schema:
            type: string
            format: uuid
          description: Department ID filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - PENDING
              - APPROVED
              - REJECTED
              - CANCELLED
          description: Leave request status filter
      responses:
        '200':
          description: Report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveRequest'
                  total:
                    type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/reports/leave-by-employee/{employeeId}:
    get:
      tags:
        - Reports
      summary: Get leave reports by employee
      description: Generate leave reports for a specific employee
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for report period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for report period
        - name: status
          in: query
          schema:
            type: string
            enum:
              - PENDING
              - APPROVED
              - REJECTED
              - CANCELLED
          description: Leave request status filter
      responses:
        '200':
          description: Report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveRequest'
                  total:
                    type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/reports/leave-by-type:
    get:
      tags:
        - Reports
      summary: Get leave reports by type
      description: Generate leave reports filtered by leave type
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for report period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for report period
        - name: leaveTypeId
          in: query
          schema:
            type: string
            format: uuid
          description: Leave type ID filter
        - name: status
          in: query
          schema:
            type: string
            enum:
              - PENDING
              - APPROVED
              - REJECTED
              - CANCELLED
          description: Leave request status filter
      responses:
        '200':
          description: Report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveRequest'
                  total:
                    type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/reports/leave-calendar:
    get:
      tags:
        - Reports
      summary: Get leave calendar
      description: Generate leave calendar view
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for calendar period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for calendar period
        - name: departmentId
          in: query
          schema:
            type: string
            format: uuid
          description: Department ID filter
      responses:
        '200':
          description: Calendar generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LeaveRequest'
                  total:
                    type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/reports/export/csv:
    get:
      tags:
        - Reports
      summary: Export reports to CSV
      description: Export leave reports to CSV format
      security:
        - bearerAuth: []
      parameters:
        - name: reportType
          in: query
          required: true
          schema:
            type: string
            enum:
              - DEPARTMENT
              - EMPLOYEE
              - LEAVE_TYPE
              - CALENDAR
          description: Type of report to export
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for report period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for report period
      responses:
        '200':
          description: CSV export successful
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/reports/export/excel:
    get:
      tags:
        - Reports
      summary: Export reports to Excel
      description: Export leave reports to Excel format
      security:
        - bearerAuth: []
      parameters:
        - name: reportType
          in: query
          required: true
          schema:
            type: string
            enum:
              - DEPARTMENT
              - EMPLOYEE
              - LEAVE_TYPE
              - CALENDAR
          description: Type of report to export
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for report period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for report period
      responses:
        '200':
          description: Excel export successful
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/notifications/my-notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      description: Retrieve all notifications for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Number of notifications per page
        - name: unreadOnly
          in: query
          schema:
            type: boolean
            default: false
          description: Filter to show only unread notifications
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/notifications/{id}/read:
    put:
      tags:
        - Notifications
      summary: Mark notification as read
      description: Mark a specific notification as read
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Notification ID
      responses:
        '200':
          description: Notification marked as read successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Notification marked as read
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Notification not found
        '500':
          description: Internal server error
  /api/notifications/mark-all-read:
    put:
      tags:
        - Notifications
      summary: Mark all notifications as read
      description: Mark all notifications for the authenticated user as read
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All notifications marked as read successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: All notifications marked as read
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/notifications/{id}:
    delete:
      tags:
        - Notifications
      summary: Delete notification
      description: Delete a specific notification for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Notification ID
      responses:
        '200':
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Notification deleted successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Notification not found
        '500':
          description: Internal server error
  /api/notifications/preferences:
    get:
      tags:
        - Notifications
      summary: Get notification preferences
      description: Retrieve notification preferences for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notification preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/NotificationPreferences'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    put:
      tags:
        - Notifications
      summary: Update notification preferences
      description: Update notification preferences for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreferencesUpdate'
      responses:
        '200':
          description: Notification preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Notification preferences updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/audit/security-events:
    get:
      tags:
        - Audit
      summary: Get recent security events
      description: Retrieve recent security events (Admin/HR only)
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
            maximum: 500
          description: Maximum number of events to return
      responses:
        '200':
          description: Security events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  count:
                    type: integer
                    description: Number of events returned
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/audit/cleanup:
    post:
      tags:
        - Audit
      summary: Clean up old audit logs
      description: Clean up old security logs (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                retentionDays:
                  type: integer
                  default: 90
                  minimum: 30
                  maximum: 365
                  description: Number of days to retain logs
      responses:
        '200':
          description: Cleanup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    description: Success message
                  deletedCount:
                    type: integer
                    description: Number of logs deleted
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '500':
          description: Internal server error
  /api/documents/upload/{leaveRequestId}:
    post:
      tags:
        - Documents
      summary: Upload document to leave request
      description: |
        Upload a document file to a specific leave request.
        **Access**: EMPLOYEE, MANAGER, HR_MANAGER, ADMIN only. GUEST users cannot upload documents.
      security:
        - bearerAuth: []
      parameters:
        - name: leaveRequestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the leave request
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
                  description: Document file to upload
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad request - invalid file or missing required fields
        '401':
          description: Unauthorized
        '404':
          description: Leave request not found
        '500':
          description: Internal server error
  /api/documents/leave-request/{leaveRequestId}:
    get:
      tags:
        - Documents
      summary: Get documents for a leave request
      description: |
        Retrieve all documents associated with a specific leave request.
        **Access**: EMPLOYEE, MANAGER, HR_MANAGER, ADMIN only. GUEST users cannot access documents.
      security:
        - bearerAuth: []
      parameters:
        - name: leaveRequestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the leave request
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/documents/{documentId}:
    get:
      tags:
        - Documents
      summary: Get specific document
      description: Retrieve details of a specific document
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the document
      responses:
        '200':
          description: Document retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Document not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Documents
      summary: Delete document
      description: Delete a specific document (Admin/HR Manager only)
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the document
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Document deleted successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Document not found
        '500':
          description: Internal server error
  /api/manager/hierarchy/{employeeId}:
    get:
      tags:
        - Manager
      summary: Get employee hierarchy
      description: Retrieve the management hierarchy for a specific employee
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the employee
      responses:
        '200':
          description: Employee hierarchy retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  employee:
                    $ref: '#/components/schemas/Employee'
                  manager:
                    $ref: '#/components/schemas/Employee'
                  department:
                    $ref: '#/components/schemas/Department'
                  hierarchy:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Employee not found
        '500':
          description: Internal server error
  /api/manager/team/{managerId}:
    get:
      tags:
        - Manager
      summary: Get team members for a manager
      description: Retrieve all team members managed by a specific manager
      security:
        - bearerAuth: []
      parameters:
        - name: managerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the manager
        - name: nested
          in: query
          schema:
            type: boolean
            default: false
          description: Include nested team members (subordinates of subordinates)
      responses:
        '200':
          description: Team members retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  manager:
                    $ref: '#/components/schemas/Employee'
                  teamMembers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  totalCount:
                    type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/manager/can-manage/{managerId}/{employeeId}:
    get:
      tags:
        - Manager
      summary: Check if user can manage another employee
      description: Verify if a manager has authority over a specific employee
      security:
        - bearerAuth: []
      parameters:
        - name: managerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the manager
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the employee
      responses:
        '200':
          description: Management permission checked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  canManage:
                    type: boolean
                  reason:
                    type: string
                    description: Explanation if cannot manage
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/manager/approval-chain/{employeeId}:
    get:
      tags:
        - Manager
      summary: Get approval chain for an employee
      description: Retrieve the complete approval chain for leave requests
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the employee
      responses:
        '200':
          description: Approval chain retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  employee:
                    $ref: '#/components/schemas/Employee'
                  approvalChain:
                    type: array
                    items:
                      type: object
                      properties:
                        level:
                          type: integer
                        approver:
                          $ref: '#/components/schemas/Employee'
                        role:
                          type: string
                        isRequired:
                          type: boolean
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/manager/assign-manager:
    post:
      tags:
        - Manager
      summary: Assign manager to employee
      description: Assign or change the manager for a specific employee (Admin/HR Manager only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - employeeId
                - newManagerId
              properties:
                employeeId:
                  type: string
                  format: uuid
                  description: ID of the employee
                newManagerId:
                  type: string
                  format: uuid
                  description: ID of the new manager
                effectiveDate:
                  type: string
                  format: date
                  description: Effective date for the change
      responses:
        '200':
          description: Manager assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Manager assigned successfully
                  employee:
                    $ref: '#/components/schemas/Employee'
                  newManager:
                    $ref: '#/components/schemas/Employee'
                  effectiveDate:
                    type: string
                    format: date
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/manager/performance/{managerId}:
    get:
      tags:
        - Manager
      summary: Get manager performance metrics
      description: Retrieve performance metrics for a specific manager
      security:
        - bearerAuth: []
      parameters:
        - name: managerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the manager
        - name: period
          in: query
          schema:
            type: string
            enum:
              - month
              - quarter
              - year
            default: month
          description: Performance period
      responses:
        '200':
          description: Performance metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  manager:
                    $ref: '#/components/schemas/Employee'
                  period:
                    type: string
                  metrics:
                    type: object
                    properties:
                      teamSize:
                        type: integer
                      averageLeaveApprovalTime:
                        type: number
                      teamProductivity:
                        type: number
                      employeeSatisfaction:
                        type: number
                      turnoverRate:
                        type: number
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /api/manager/delegation:
    post:
      tags:
        - Manager
      summary: Delegate management responsibilities
      description: Temporarily delegate management responsibilities to another employee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - managerId
                - delegateId
                - startDate
                - endDate
              properties:
                managerId:
                  type: string
                  format: uuid
                  description: ID of the manager delegating
                delegateId:
                  type: string
                  format: uuid
                  description: ID of the employee receiving delegation
                startDate:
                  type: string
                  format: date
                  description: Start date of delegation
                endDate:
                  type: string
                  format: date
                  description: End date of delegation
                scope:
                  type: array
                  items:
                    type: string
                    enum:
                      - LEAVE_APPROVAL
                      - PERFORMANCE_REVIEW
                      - TEAM_MANAGEMENT
                  description: Scope of delegated responsibilities
      responses:
        '200':
          description: Delegation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Delegation created successfully
                  delegation:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      manager:
                        $ref: '#/components/schemas/Employee'
                      delegate:
                        $ref: '#/components/schemas/Employee'
                      startDate:
                        type: string
                        format: date
                      endDate:
                        type: string
                        format: date
                      scope:
                        type: array
                        items:
                          type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '500':
          description: Internal server error
  /api/profile:
    get:
      tags:
        - Profile Management
      summary: Get current user's profile
      description: Retrieve the profile information of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserInfo'
                  message:
                    type: string
                    example: User profile retrieved successfully
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized access
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal server error
                  error:
                    type: string
                    example: Something went wrong
    put:
      tags:
        - Profile Management
      summary: Update current user's profile
      description: Update the current user's profile information and optionally upload a new profile picture
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: User's first name
                  example: John
                lastName:
                  type: string
                  description: User's last name
                  example: Doe
                profilePicture:
                  type: string
                  format: binary
                  description: Profile picture file (optional)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@company.com
                      profilePicture:
                        type: string
                        nullable: true
                        example: https://res.cloudinary.com/example/image/upload/profile-pictures/abc123
                      role:
                        type: string
                        example: EMPLOYEE
                  message:
                    type: string
                    example: Profile updated successfully
        '400':
          description: Invalid request data or file upload error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid request data
                  error:
                    type: string
                    example: Only image files are allowed for profile pictures
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized access
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal server error
                  error:
                    type: string
                    example: Something went wrong
  /api/profile/picture:
    delete:
      tags:
        - Profile Management
      summary: Delete current user's profile picture
      description: Remove the profile picture of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Profile picture deleted successfully
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized access
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal server error
                  error:
                    type: string
                    example: Something went wrong
