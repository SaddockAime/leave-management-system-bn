paths:
  /api/employees/my-department:
    get:
      tags:
        - Employees
      summary: Get my department employees
      description: Get employees in the manager's department (Manager only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for employee name, email, or position
        - in: query
          name: position
          schema:
            type: string
            enum: [EMPLOYEE, MANAGER, HR_MANAGER, ADMIN]
          description: Filter by position
        - in: query
          name: status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, TERMINATED, ON_LEAVE]
          description: Filter by status
      responses:
        '200':
          description: Department employees retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Only managers can access this endpoint
        '404':
          description: Employee not found
        '500':
          description: Internal server error

  /api/employees:
    get:
      tags:
        - Employees
      summary: Get all employees
      description: Retrieve a list of all employees with pagination and filtering
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - in: query
          name: departmentId
          schema:
            type: string
            format: uuid
          description: Filter by department
        - in: query
          name: status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, TERMINATED, ON_LEAVE]
          description: Filter by status
      responses:
        '200':
          description: Employees retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    post:
      tags:
        - Employees
      summary: Create employee profile
      description: |
        Create an employee profile for an existing user (HR/Admin only).
        This action:
        - Creates employee record for existing user
        - Updates user role from GUEST to EMPLOYEE (if applicable)
        - Sends professional welcome email notification to employee
        - Grants full employee access and permissions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
      responses:
        '201':
          description: Employee profile created successfully. Role updated and notification sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Employee profile created successfully. User role updated to EMPLOYEE and notification sent."
                  data:
                    type: object
                    properties:
                      employee:
                        $ref: '#/components/schemas/Employee'
                      roleChanged:
                        type: boolean
                        description: Whether user role was changed from GUEST to EMPLOYEE
                        example: true
                      emailSent:
                        type: boolean
                        description: Whether employee assignment email was sent
                        example: true
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/employees/search:
    get:
      tags:
        - Employees
      summary: Search employees
      description: Search employees with various filters
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query for name, email, or position
        - in: query
          name: departmentId
          schema:
            type: string
            format: uuid
          description: Filter by department
        - in: query
          name: status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, TERMINATED, ON_LEAVE]
          description: Filter by status
        - in: query
          name: managerId
          schema:
            type: string
            format: uuid
          description: Filter by manager
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/employees/{id}:
    get:
      tags:
        - Employees
      summary: Get employee by ID
      description: Retrieve a specific employee by their ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '200':
          description: Employee retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    put:
      tags:
        - Employees
      summary: Update employee
      description: Update an existing employee record
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeUpdate'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid input data
        '404':
          description: Employee not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    delete:
      tags:
        - Employees
      summary: Delete employee
      description: Delete an employee record
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '200':
          description: Employee deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Employee not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/departments:
    get:
      tags:
        - Departments
      summary: Get all departments
      description: Retrieve a list of all departments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Departments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    post:
      tags:
        - Departments
      summary: Create new department
      description: Create a new department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreate'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/departments/{id}:
    get:
      tags:
        - Departments
      summary: Get department by ID
      description: Retrieve a specific department by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Department ID
      responses:
        '200':
          description: Department retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '404':
          description: Department not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    put:
      tags:
        - Departments
      summary: Update department
      description: Update an existing department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Department ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpdate'
      responses:
        '200':
          description: Department updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          description: Invalid input data
        '404':
          description: Department not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    delete:
      tags:
        - Departments
      summary: Delete department
      description: Delete a department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Department ID
      responses:
        '200':
          description: Department deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Department not found
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
